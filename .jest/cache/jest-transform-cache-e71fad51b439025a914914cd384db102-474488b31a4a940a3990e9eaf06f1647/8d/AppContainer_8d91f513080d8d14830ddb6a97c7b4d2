10ccf4c825c077d61f3565860a9224df
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _View = _interopRequireDefault(require("../Components/View/View"));
var _RCTDeviceEventEmitter = _interopRequireDefault(require("../EventEmitter/RCTDeviceEventEmitter"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var _RootTag = require("./RootTag");
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var AppContainer = function (_React$Component) {
  (0, _inherits2.default)(AppContainer, _React$Component);
  var _super = _createSuper(AppContainer);
  function AppContainer() {
    var _this;
    (0, _classCallCheck2.default)(this, AppContainer);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      inspector: null,
      devtoolsOverlay: null,
      mainKey: 1,
      hasError: false
    };
    _this._subscription = null;
    return _this;
  }
  (0, _createClass2.default)(AppContainer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      if (__DEV__) {
        if (!this.props.internal_excludeInspector) {
          this._subscription = _RCTDeviceEventEmitter.default.addListener('toggleElementInspector', function () {
            var Inspector = require("../Inspector/Inspector");
            var inspector = _this2.state.inspector ? null : (0, _jsxRuntime.jsx)(Inspector, {
              inspectedView: _this2._mainRef,
              onRequestRerenderApp: function onRequestRerenderApp(updateInspectedView) {
                _this2.setState(function (s) {
                  return {
                    mainKey: s.mainKey + 1
                  };
                }, function () {
                  return updateInspectedView(_this2._mainRef);
                });
              }
            });
            _this2.setState({
              inspector: inspector
            });
          });
          if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__ != null) {
            var DevtoolsOverlay = require("../Inspector/DevtoolsOverlay").default;
            var devtoolsOverlay = (0, _jsxRuntime.jsx)(DevtoolsOverlay, {
              inspectedView: this._mainRef
            });
            this.setState({
              devtoolsOverlay: devtoolsOverlay
            });
          }
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._subscription != null) {
        this._subscription.remove();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      var logBox = null;
      if (__DEV__) {
        if (!this.props.internal_excludeLogBox) {
          var LogBoxNotificationContainer = require("../LogBox/LogBoxNotificationContainer").default;
          logBox = (0, _jsxRuntime.jsx)(LogBoxNotificationContainer, {});
        }
      }
      var innerView = (0, _jsxRuntime.jsx)(_View.default, {
        collapsable: !this.state.inspector && !this.state.devtoolsOverlay,
        pointerEvents: "box-none",
        style: styles.appContainer,
        ref: function ref(_ref) {
          _this3._mainRef = _ref;
        },
        children: this.props.children
      }, this.state.mainKey);
      var Wrapper = this.props.WrapperComponent;
      if (Wrapper != null) {
        innerView = (0, _jsxRuntime.jsx)(Wrapper, {
          initialProps: this.props.initialProps,
          fabric: this.props.fabric === true,
          showArchitectureIndicator: this.props.showArchitectureIndicator === true,
          children: innerView
        });
      }
      return (0, _jsxRuntime.jsx)(_RootTag.RootTagContext.Provider, {
        value: (0, _RootTag.createRootTag)(this.props.rootTag),
        children: (0, _jsxRuntime.jsxs)(_View.default, {
          style: styles.appContainer,
          pointerEvents: "box-none",
          children: [!this.state.hasError && innerView, this.state.devtoolsOverlay, this.state.inspector, logBox]
        })
      });
    }
  }]);
  return AppContainer;
}(React.Component);
AppContainer.getDerivedStateFromError = undefined;
var styles = _StyleSheet.default.create({
  appContainer: {
    flex: 1
  }
});
module.exports = AppContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlldyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1JDVERldmljZUV2ZW50RW1pdHRlciIsIl9TdHlsZVNoZWV0IiwiX1Jvb3RUYWciLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2pzeFJ1bnRpbWUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiX2NyZWF0ZVN1cGVyIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2NyZWF0ZVN1cGVySW50ZXJuYWwiLCJTdXBlciIsIl9nZXRQcm90b3R5cGVPZjIiLCJyZXN1bHQiLCJOZXdUYXJnZXQiLCJjb25zdHJ1Y3RvciIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsInNoYW0iLCJQcm94eSIsIkJvb2xlYW4iLCJ2YWx1ZU9mIiwiZSIsIkFwcENvbnRhaW5lciIsIl9SZWFjdCRDb21wb25lbnQiLCJfaW5oZXJpdHMyIiwiX3N1cGVyIiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2xlbiIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJjb25jYXQiLCJzdGF0ZSIsImluc3BlY3RvciIsImRldnRvb2xzT3ZlcmxheSIsIm1haW5LZXkiLCJoYXNFcnJvciIsIl9zdWJzY3JpcHRpb24iLCJfY3JlYXRlQ2xhc3MyIiwidmFsdWUiLCJjb21wb25lbnREaWRNb3VudCIsIl90aGlzMiIsIl9fREVWX18iLCJwcm9wcyIsImludGVybmFsX2V4Y2x1ZGVJbnNwZWN0b3IiLCJSQ1REZXZpY2VFdmVudEVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsIkluc3BlY3RvciIsImpzeCIsImluc3BlY3RlZFZpZXciLCJfbWFpblJlZiIsIm9uUmVxdWVzdFJlcmVuZGVyQXBwIiwidXBkYXRlSW5zcGVjdGVkVmlldyIsInNldFN0YXRlIiwicyIsIndpbmRvdyIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIkRldnRvb2xzT3ZlcmxheSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVtb3ZlIiwicmVuZGVyIiwiX3RoaXMzIiwibG9nQm94IiwiaW50ZXJuYWxfZXhjbHVkZUxvZ0JveCIsIkxvZ0JveE5vdGlmaWNhdGlvbkNvbnRhaW5lciIsImlubmVyVmlldyIsImNvbGxhcHNhYmxlIiwicG9pbnRlckV2ZW50cyIsInN0eWxlIiwic3R5bGVzIiwiYXBwQ29udGFpbmVyIiwicmVmIiwiY2hpbGRyZW4iLCJXcmFwcGVyIiwiV3JhcHBlckNvbXBvbmVudCIsImluaXRpYWxQcm9wcyIsImZhYnJpYyIsInNob3dBcmNoaXRlY3R1cmVJbmRpY2F0b3IiLCJSb290VGFnQ29udGV4dCIsIlByb3ZpZGVyIiwiY3JlYXRlUm9vdFRhZyIsInJvb3RUYWciLCJqc3hzIiwiQ29tcG9uZW50IiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwidW5kZWZpbmVkIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImZsZXgiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQXBwQ29udGFpbmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCB0eXBlIHtSb290VGFnfSBmcm9tICcuL1Jvb3RUYWcnO1xuXG5pbXBvcnQgVmlldyBmcm9tICcuLi9Db21wb25lbnRzL1ZpZXcvVmlldyc7XG5pbXBvcnQgUkNURGV2aWNlRXZlbnRFbWl0dGVyIGZyb20gJy4uL0V2ZW50RW1pdHRlci9SQ1REZXZpY2VFdmVudEVtaXR0ZXInO1xuaW1wb3J0IFN0eWxlU2hlZXQgZnJvbSAnLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCB7dHlwZSBFdmVudFN1YnNjcmlwdGlvbn0gZnJvbSAnLi4vdmVuZG9yL2VtaXR0ZXIvRXZlbnRFbWl0dGVyJztcbmltcG9ydCB7Um9vdFRhZ0NvbnRleHQsIGNyZWF0ZVJvb3RUYWd9IGZyb20gJy4vUm9vdFRhZyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnR5cGUgUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgY2hpbGRyZW4/OiBSZWFjdC5Ob2RlLFxuICBmYWJyaWM/OiBib29sZWFuLFxuICB1c2VDb25jdXJyZW50Um9vdD86IGJvb2xlYW4sXG4gIHJvb3RUYWc6IG51bWJlciB8IFJvb3RUYWcsXG4gIGluaXRpYWxQcm9wcz86IHsuLi59LFxuICBzaG93QXJjaGl0ZWN0dXJlSW5kaWNhdG9yPzogYm9vbGVhbixcbiAgV3JhcHBlckNvbXBvbmVudD86ID9SZWFjdC5Db21wb25lbnRUeXBlPGFueT4sXG4gIGludGVybmFsX2V4Y2x1ZGVMb2dCb3g/OiA/Ym9vbGVhbixcbiAgaW50ZXJuYWxfZXhjbHVkZUluc3BlY3Rvcj86ID9ib29sZWFuLFxufH0+O1xuXG50eXBlIFN0YXRlID0ge3xcbiAgaW5zcGVjdG9yOiA/UmVhY3QuTm9kZSxcbiAgZGV2dG9vbHNPdmVybGF5OiA/UmVhY3QuTm9kZSxcbiAgbWFpbktleTogbnVtYmVyLFxuICBoYXNFcnJvcjogYm9vbGVhbixcbnx9O1xuXG5jbGFzcyBBcHBDb250YWluZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIHN0YXRlOiBTdGF0ZSA9IHtcbiAgICBpbnNwZWN0b3I6IG51bGwsXG4gICAgZGV2dG9vbHNPdmVybGF5OiBudWxsLFxuICAgIG1haW5LZXk6IDEsXG4gICAgaGFzRXJyb3I6IGZhbHNlLFxuICB9O1xuICBfbWFpblJlZjogP1JlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIFZpZXc+O1xuICBfc3Vic2NyaXB0aW9uOiA/RXZlbnRTdWJzY3JpcHRpb24gPSBudWxsO1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IGFueSA9IHVuZGVmaW5lZDtcblxuICBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaWYgKCF0aGlzLnByb3BzLmludGVybmFsX2V4Y2x1ZGVJbnNwZWN0b3IpIHtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gUkNURGV2aWNlRXZlbnRFbWl0dGVyLmFkZExpc3RlbmVyKFxuICAgICAgICAgICd0b2dnbGVFbGVtZW50SW5zcGVjdG9yJyxcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBJbnNwZWN0b3IgPSByZXF1aXJlKCcuLi9JbnNwZWN0b3IvSW5zcGVjdG9yJyk7XG4gICAgICAgICAgICBjb25zdCBpbnNwZWN0b3IgPSB0aGlzLnN0YXRlLmluc3BlY3RvciA/IG51bGwgOiAoXG4gICAgICAgICAgICAgIDxJbnNwZWN0b3JcbiAgICAgICAgICAgICAgICBpbnNwZWN0ZWRWaWV3PXt0aGlzLl9tYWluUmVmfVxuICAgICAgICAgICAgICAgIG9uUmVxdWVzdFJlcmVuZGVyQXBwPXt1cGRhdGVJbnNwZWN0ZWRWaWV3ID0+IHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICAgICAgICAgICAgICAgIHMgPT4gKHttYWluS2V5OiBzLm1haW5LZXkgKyAxfSksXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHVwZGF0ZUluc3BlY3RlZFZpZXcodGhpcy5fbWFpblJlZiksXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7aW5zcGVjdG9yfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHdpbmRvdy5fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gIT0gbnVsbCkge1xuICAgICAgICAgIGNvbnN0IERldnRvb2xzT3ZlcmxheSA9XG4gICAgICAgICAgICByZXF1aXJlKCcuLi9JbnNwZWN0b3IvRGV2dG9vbHNPdmVybGF5JykuZGVmYXVsdDtcbiAgICAgICAgICBjb25zdCBkZXZ0b29sc092ZXJsYXkgPSAoXG4gICAgICAgICAgICA8RGV2dG9vbHNPdmVybGF5IGluc3BlY3RlZFZpZXc9e3RoaXMuX21haW5SZWZ9IC8+XG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtkZXZ0b29sc092ZXJsYXl9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb24gIT0gbnVsbCkge1xuICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uLnJlbW92ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcbiAgICBsZXQgbG9nQm94ID0gbnVsbDtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaWYgKCF0aGlzLnByb3BzLmludGVybmFsX2V4Y2x1ZGVMb2dCb3gpIHtcbiAgICAgICAgY29uc3QgTG9nQm94Tm90aWZpY2F0aW9uQ29udGFpbmVyID1cbiAgICAgICAgICByZXF1aXJlKCcuLi9Mb2dCb3gvTG9nQm94Tm90aWZpY2F0aW9uQ29udGFpbmVyJykuZGVmYXVsdDtcbiAgICAgICAgbG9nQm94ID0gPExvZ0JveE5vdGlmaWNhdGlvbkNvbnRhaW5lciAvPjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgaW5uZXJWaWV3OiBSZWFjdC5Ob2RlID0gKFxuICAgICAgPFZpZXdcbiAgICAgICAgY29sbGFwc2FibGU9eyF0aGlzLnN0YXRlLmluc3BlY3RvciAmJiAhdGhpcy5zdGF0ZS5kZXZ0b29sc092ZXJsYXl9XG4gICAgICAgIGtleT17dGhpcy5zdGF0ZS5tYWluS2V5fVxuICAgICAgICBwb2ludGVyRXZlbnRzPVwiYm94LW5vbmVcIlxuICAgICAgICBzdHlsZT17c3R5bGVzLmFwcENvbnRhaW5lcn1cbiAgICAgICAgcmVmPXtyZWYgPT4ge1xuICAgICAgICAgIHRoaXMuX21haW5SZWYgPSByZWY7XG4gICAgICAgIH19PlxuICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgIDwvVmlldz5cbiAgICApO1xuXG4gICAgY29uc3QgV3JhcHBlciA9IHRoaXMucHJvcHMuV3JhcHBlckNvbXBvbmVudDtcbiAgICBpZiAoV3JhcHBlciAhPSBudWxsKSB7XG4gICAgICBpbm5lclZpZXcgPSAoXG4gICAgICAgIDxXcmFwcGVyXG4gICAgICAgICAgaW5pdGlhbFByb3BzPXt0aGlzLnByb3BzLmluaXRpYWxQcm9wc31cbiAgICAgICAgICBmYWJyaWM9e3RoaXMucHJvcHMuZmFicmljID09PSB0cnVlfVxuICAgICAgICAgIHNob3dBcmNoaXRlY3R1cmVJbmRpY2F0b3I9e1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5zaG93QXJjaGl0ZWN0dXJlSW5kaWNhdG9yID09PSB0cnVlXG4gICAgICAgICAgfT5cbiAgICAgICAgICB7aW5uZXJWaWV3fVxuICAgICAgICA8L1dyYXBwZXI+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPFJvb3RUYWdDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjcmVhdGVSb290VGFnKHRoaXMucHJvcHMucm9vdFRhZyl9PlxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmFwcENvbnRhaW5lcn0gcG9pbnRlckV2ZW50cz1cImJveC1ub25lXCI+XG4gICAgICAgICAgeyF0aGlzLnN0YXRlLmhhc0Vycm9yICYmIGlubmVyVmlld31cbiAgICAgICAgICB7dGhpcy5zdGF0ZS5kZXZ0b29sc092ZXJsYXl9XG4gICAgICAgICAge3RoaXMuc3RhdGUuaW5zcGVjdG9yfVxuICAgICAgICAgIHtsb2dCb3h9XG4gICAgICAgIDwvVmlldz5cbiAgICAgIDwvUm9vdFRhZ0NvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGFwcENvbnRhaW5lcjoge1xuICAgIGZsZXg6IDEsXG4gIH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHBDb250YWluZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBWUEsSUFBQUEsS0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsc0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFdBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFHLFFBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUwsT0FBQTtBQUErQixJQUFBTSxXQUFBLEdBQUFOLE9BQUE7QUFBQSxTQUFBTyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FB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