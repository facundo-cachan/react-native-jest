811442ea5474aee6f2f2e9ef42c37215
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _normalizeColor = _interopRequireDefault(require("../../StyleSheet/normalizeColor"));
var _PlatformColorValueTypes = require("../../StyleSheet/PlatformColorValueTypes");
var _NativeAnimatedHelper = _interopRequireDefault(require("../NativeAnimatedHelper"));
var _AnimatedValue = _interopRequireDefault(require("./AnimatedValue"));
var _AnimatedWithChildren2 = _interopRequireDefault(require("./AnimatedWithChildren"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
var defaultColor = {
  r: 0,
  g: 0,
  b: 0,
  a: 1.0
};
var _uniqueId = 1;
function processColor(color) {
  if (color === undefined || color === null) {
    return null;
  }
  if (isRgbaValue(color)) {
    return color;
  }
  var normalizedColor = (0, _normalizeColor.default)(color);
  if (normalizedColor === undefined || normalizedColor === null) {
    return null;
  }
  if (typeof normalizedColor === 'object') {
    var processedColorObj = (0, _PlatformColorValueTypes.processColorObject)(normalizedColor);
    if (processedColorObj != null) {
      return processedColorObj;
    }
  } else if (typeof normalizedColor === 'number') {
    var r = (normalizedColor & 0xff000000) >>> 24;
    var g = (normalizedColor & 0x00ff0000) >>> 16;
    var b = (normalizedColor & 0x0000ff00) >>> 8;
    var a = (normalizedColor & 0x000000ff) / 255;
    return {
      r: r,
      g: g,
      b: b,
      a: a
    };
  }
  return null;
}
function isRgbaValue(value) {
  return value && typeof value.r === 'number' && typeof value.g === 'number' && typeof value.b === 'number' && typeof value.a === 'number';
}
function isRgbaAnimatedValue(value) {
  return value && value.r instanceof _AnimatedValue.default && value.g instanceof _AnimatedValue.default && value.b instanceof _AnimatedValue.default && value.a instanceof _AnimatedValue.default;
}
var AnimatedColor = function (_AnimatedWithChildren) {
  (0, _inherits2.default)(AnimatedColor, _AnimatedWithChildren);
  var _super = _createSuper(AnimatedColor);
  function AnimatedColor(valueIn, config) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedColor);
    _this = _super.call(this);
    _this._listeners = {};
    var value = valueIn != null ? valueIn : defaultColor;
    if (isRgbaAnimatedValue(value)) {
      var rgbaAnimatedValue = value;
      _this.r = rgbaAnimatedValue.r;
      _this.g = rgbaAnimatedValue.g;
      _this.b = rgbaAnimatedValue.b;
      _this.a = rgbaAnimatedValue.a;
    } else {
      var _processColor;
      var processedColor = (_processColor = processColor(value)) != null ? _processColor : defaultColor;
      var initColor = defaultColor;
      if (isRgbaValue(processedColor)) {
        initColor = processedColor;
      } else {
        _this.nativeColor = processedColor;
      }
      _this.r = new _AnimatedValue.default(initColor.r);
      _this.g = new _AnimatedValue.default(initColor.g);
      _this.b = new _AnimatedValue.default(initColor.b);
      _this.a = new _AnimatedValue.default(initColor.a);
    }
    if (_this.nativeColor || config && config.useNativeDriver) {
      _this.__makeNative();
    }
    return _this;
  }
  (0, _createClass2.default)(AnimatedColor, [{
    key: "setValue",
    value: function setValue(value) {
      var _processColor2;
      var shouldUpdateNodeConfig = false;
      if (this.__isNative) {
        var nativeTag = this.__getNativeTag();
        NativeAnimatedAPI.setWaitingForIdentifier(nativeTag.toString());
      }
      var processedColor = (_processColor2 = processColor(value)) != null ? _processColor2 : defaultColor;
      if (isRgbaValue(processedColor)) {
        var rgbaValue = processedColor;
        this.r.setValue(rgbaValue.r);
        this.g.setValue(rgbaValue.g);
        this.b.setValue(rgbaValue.b);
        this.a.setValue(rgbaValue.a);
        if (this.nativeColor != null) {
          this.nativeColor = null;
          shouldUpdateNodeConfig = true;
        }
      } else {
        var nativeColor = processedColor;
        if (this.nativeColor !== nativeColor) {
          this.nativeColor = nativeColor;
          shouldUpdateNodeConfig = true;
        }
      }
      if (this.__isNative) {
        var _nativeTag = this.__getNativeTag();
        if (shouldUpdateNodeConfig) {
          NativeAnimatedAPI.updateAnimatedNodeConfig(_nativeTag, this.__getNativeConfig());
        }
        NativeAnimatedAPI.unsetWaitingForIdentifier(_nativeTag.toString());
      }
    }
  }, {
    key: "setOffset",
    value: function setOffset(offset) {
      this.r.setOffset(offset.r);
      this.g.setOffset(offset.g);
      this.b.setOffset(offset.b);
      this.a.setOffset(offset.a);
    }
  }, {
    key: "flattenOffset",
    value: function flattenOffset() {
      this.r.flattenOffset();
      this.g.flattenOffset();
      this.b.flattenOffset();
      this.a.flattenOffset();
    }
  }, {
    key: "extractOffset",
    value: function extractOffset() {
      this.r.extractOffset();
      this.g.extractOffset();
      this.b.extractOffset();
      this.a.extractOffset();
    }
  }, {
    key: "addListener",
    value: function addListener(callback) {
      var _this2 = this;
      var id = String(_uniqueId++);
      var jointCallback = function jointCallback(_ref) {
        var number = _ref.value;
        callback(_this2.__getValue());
      };
      this._listeners[id] = {
        r: this.r.addListener(jointCallback),
        g: this.g.addListener(jointCallback),
        b: this.b.addListener(jointCallback),
        a: this.a.addListener(jointCallback)
      };
      return id;
    }
  }, {
    key: "removeListener",
    value: function removeListener(id) {
      this.r.removeListener(this._listeners[id].r);
      this.g.removeListener(this._listeners[id].g);
      this.b.removeListener(this._listeners[id].b);
      this.a.removeListener(this._listeners[id].a);
      delete this._listeners[id];
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners() {
      this.r.removeAllListeners();
      this.g.removeAllListeners();
      this.b.removeAllListeners();
      this.a.removeAllListeners();
      this._listeners = {};
    }
  }, {
    key: "stopAnimation",
    value: function stopAnimation(callback) {
      this.r.stopAnimation();
      this.g.stopAnimation();
      this.b.stopAnimation();
      this.a.stopAnimation();
      callback && callback(this.__getValue());
    }
  }, {
    key: "resetAnimation",
    value: function resetAnimation(callback) {
      this.r.resetAnimation();
      this.g.resetAnimation();
      this.b.resetAnimation();
      this.a.resetAnimation();
      callback && callback(this.__getValue());
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      if (this.nativeColor != null) {
        return this.nativeColor;
      } else {
        return `rgba(${this.r.__getValue()}, ${this.g.__getValue()}, ${this.b.__getValue()}, ${this.a.__getValue()})`;
      }
    }
  }, {
    key: "__attach",
    value: function __attach() {
      this.r.__addChild(this);
      this.g.__addChild(this);
      this.b.__addChild(this);
      this.a.__addChild(this);
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedColor.prototype), "__attach", this).call(this);
    }
  }, {
    key: "__detach",
    value: function __detach() {
      this.r.__removeChild(this);
      this.g.__removeChild(this);
      this.b.__removeChild(this);
      this.a.__removeChild(this);
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedColor.prototype), "__detach", this).call(this);
    }
  }, {
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      this.r.__makeNative(platformConfig);
      this.g.__makeNative(platformConfig);
      this.b.__makeNative(platformConfig);
      this.a.__makeNative(platformConfig);
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedColor.prototype), "__makeNative", this).call(this, platformConfig);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      return {
        type: 'color',
        r: this.r.__getNativeTag(),
        g: this.g.__getNativeTag(),
        b: this.b.__getNativeTag(),
        a: this.a.__getNativeTag(),
        nativeColor: this.nativeColor
      };
    }
  }]);
  return AnimatedColor;
}(_AnimatedWithChildren2.default);
exports.default = AnimatedColor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2dldDIiLCJfaW5oZXJpdHMyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9ub3JtYWxpemVDb2xvciIsIl9QbGF0Zm9ybUNvbG9yVmFsdWVUeXBlcyIsIl9OYXRpdmVBbmltYXRlZEhlbHBlciIsIl9BbmltYXRlZFZhbHVlIiwiX0FuaW1hdGVkV2l0aENoaWxkcmVuMiIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJyZXN1bHQiLCJOZXdUYXJnZXQiLCJjb25zdHJ1Y3RvciIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJhcmd1bWVudHMiLCJhcHBseSIsInNoYW0iLCJQcm94eSIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiY2FsbCIsImUiLCJOYXRpdmVBbmltYXRlZEFQSSIsIk5hdGl2ZUFuaW1hdGVkSGVscGVyIiwiQVBJIiwiZGVmYXVsdENvbG9yIiwiciIsImciLCJiIiwiYSIsIl91bmlxdWVJZCIsInByb2Nlc3NDb2xvciIsImNvbG9yIiwidW5kZWZpbmVkIiwiaXNSZ2JhVmFsdWUiLCJub3JtYWxpemVkQ29sb3IiLCJub3JtYWxpemVDb2xvciIsInByb2Nlc3NlZENvbG9yT2JqIiwicHJvY2Vzc0NvbG9yT2JqZWN0IiwiaXNSZ2JhQW5pbWF0ZWRWYWx1ZSIsIkFuaW1hdGVkVmFsdWUiLCJBbmltYXRlZENvbG9yIiwiX0FuaW1hdGVkV2l0aENoaWxkcmVuIiwiX3N1cGVyIiwidmFsdWVJbiIsImNvbmZpZyIsIl90aGlzIiwiX2xpc3RlbmVycyIsInJnYmFBbmltYXRlZFZhbHVlIiwiX3Byb2Nlc3NDb2xvciIsInByb2Nlc3NlZENvbG9yIiwiaW5pdENvbG9yIiwibmF0aXZlQ29sb3IiLCJ1c2VOYXRpdmVEcml2ZXIiLCJfX21ha2VOYXRpdmUiLCJrZXkiLCJzZXRWYWx1ZSIsIl9wcm9jZXNzQ29sb3IyIiwic2hvdWxkVXBkYXRlTm9kZUNvbmZpZyIsIl9faXNOYXRpdmUiLCJuYXRpdmVUYWciLCJfX2dldE5hdGl2ZVRhZyIsInNldFdhaXRpbmdGb3JJZGVudGlmaWVyIiwidG9TdHJpbmciLCJyZ2JhVmFsdWUiLCJ1cGRhdGVBbmltYXRlZE5vZGVDb25maWciLCJfX2dldE5hdGl2ZUNvbmZpZyIsInVuc2V0V2FpdGluZ0ZvcklkZW50aWZpZXIiLCJzZXRPZmZzZXQiLCJvZmZzZXQiLCJmbGF0dGVuT2Zmc2V0IiwiZXh0cmFjdE9mZnNldCIsImFkZExpc3RlbmVyIiwiY2FsbGJhY2siLCJfdGhpczIiLCJpZCIsIlN0cmluZyIsImpvaW50Q2FsbGJhY2siLCJfcmVmIiwibnVtYmVyIiwiX19nZXRWYWx1ZSIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwic3RvcEFuaW1hdGlvbiIsInJlc2V0QW5pbWF0aW9uIiwiX19hdHRhY2giLCJfX2FkZENoaWxkIiwiX19kZXRhY2giLCJfX3JlbW92ZUNoaWxkIiwicGxhdGZvcm1Db25maWciLCJ0eXBlIiwiQW5pbWF0ZWRXaXRoQ2hpbGRyZW4iXSwic291cmNlcyI6WyJBbmltYXRlZENvbG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUge05hdGl2ZUNvbG9yVmFsdWV9IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvUGxhdGZvcm1Db2xvclZhbHVlVHlwZXMnO1xuaW1wb3J0IHR5cGUge1Byb2Nlc3NlZENvbG9yVmFsdWV9IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJztcbmltcG9ydCB0eXBlIHtDb2xvclZhbHVlfSBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IHR5cGUge1BsYXRmb3JtQ29uZmlnfSBmcm9tICcuLi9BbmltYXRlZFBsYXRmb3JtQ29uZmlnJztcblxuaW1wb3J0IG5vcm1hbGl6ZUNvbG9yIGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvbm9ybWFsaXplQ29sb3InO1xuaW1wb3J0IHtwcm9jZXNzQ29sb3JPYmplY3R9IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvUGxhdGZvcm1Db2xvclZhbHVlVHlwZXMnO1xuaW1wb3J0IE5hdGl2ZUFuaW1hdGVkSGVscGVyIGZyb20gJy4uL05hdGl2ZUFuaW1hdGVkSGVscGVyJztcbmltcG9ydCBBbmltYXRlZFZhbHVlIGZyb20gJy4vQW5pbWF0ZWRWYWx1ZSc7XG5pbXBvcnQgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4gZnJvbSAnLi9BbmltYXRlZFdpdGhDaGlsZHJlbic7XG5cbmV4cG9ydCB0eXBlIEFuaW1hdGVkQ29sb3JDb25maWcgPSAkUmVhZE9ubHk8e1xuICB1c2VOYXRpdmVEcml2ZXI6IGJvb2xlYW4sXG59PjtcblxudHlwZSBDb2xvckxpc3RlbmVyQ2FsbGJhY2sgPSAodmFsdWU6IENvbG9yVmFsdWUpID0+IG1peGVkO1xuXG5leHBvcnQgdHlwZSBSZ2JhVmFsdWUgPSB7XG4gICtyOiBudW1iZXIsXG4gICtnOiBudW1iZXIsXG4gICtiOiBudW1iZXIsXG4gICthOiBudW1iZXIsXG4gIC4uLlxufTtcblxudHlwZSBSZ2JhQW5pbWF0ZWRWYWx1ZSA9IHtcbiAgK3I6IEFuaW1hdGVkVmFsdWUsXG4gICtnOiBBbmltYXRlZFZhbHVlLFxuICArYjogQW5pbWF0ZWRWYWx1ZSxcbiAgK2E6IEFuaW1hdGVkVmFsdWUsXG4gIC4uLlxufTtcblxuY29uc3QgTmF0aXZlQW5pbWF0ZWRBUEkgPSBOYXRpdmVBbmltYXRlZEhlbHBlci5BUEk7XG5cbmNvbnN0IGRlZmF1bHRDb2xvcjogUmdiYVZhbHVlID0ge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDEuMH07XG5sZXQgX3VuaXF1ZUlkID0gMTtcblxuLyogZXNsaW50IG5vLWJpdHdpc2U6IDAgKi9cbmZ1bmN0aW9uIHByb2Nlc3NDb2xvcihcbiAgY29sb3I/OiA/KENvbG9yVmFsdWUgfCBSZ2JhVmFsdWUpLFxuKTogPyhSZ2JhVmFsdWUgfCBOYXRpdmVDb2xvclZhbHVlKSB7XG4gIGlmIChjb2xvciA9PT0gdW5kZWZpbmVkIHx8IGNvbG9yID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoaXNSZ2JhVmFsdWUoY29sb3IpKSB7XG4gICAgLy8gJEZsb3dJZ25vcmVbaW5jb21wYXRpYmxlLWNhc3RdIC0gVHlwZSBpcyB2ZXJpZmllZCBhYm92ZVxuICAgIHJldHVybiAoY29sb3I6IFJnYmFWYWx1ZSk7XG4gIH1cblxuICBsZXQgbm9ybWFsaXplZENvbG9yOiA/UHJvY2Vzc2VkQ29sb3JWYWx1ZSA9IG5vcm1hbGl6ZUNvbG9yKFxuICAgIC8vICRGbG93SWdub3JlW2luY29tcGF0aWJsZS1jYXN0XSAtIFR5cGUgaXMgdmVyaWZpZWQgYWJvdmVcbiAgICAoY29sb3I6IENvbG9yVmFsdWUpLFxuICApO1xuICBpZiAobm9ybWFsaXplZENvbG9yID09PSB1bmRlZmluZWQgfHwgbm9ybWFsaXplZENvbG9yID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAodHlwZW9mIG5vcm1hbGl6ZWRDb2xvciA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCBwcm9jZXNzZWRDb2xvck9iajogP05hdGl2ZUNvbG9yVmFsdWUgPVxuICAgICAgcHJvY2Vzc0NvbG9yT2JqZWN0KG5vcm1hbGl6ZWRDb2xvcik7XG4gICAgaWYgKHByb2Nlc3NlZENvbG9yT2JqICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBwcm9jZXNzZWRDb2xvck9iajtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIG5vcm1hbGl6ZWRDb2xvciA9PT0gJ251bWJlcicpIHtcbiAgICBjb25zdCByOiBudW1iZXIgPSAobm9ybWFsaXplZENvbG9yICYgMHhmZjAwMDAwMCkgPj4+IDI0O1xuICAgIGNvbnN0IGc6IG51bWJlciA9IChub3JtYWxpemVkQ29sb3IgJiAweDAwZmYwMDAwKSA+Pj4gMTY7XG4gICAgY29uc3QgYjogbnVtYmVyID0gKG5vcm1hbGl6ZWRDb2xvciAmIDB4MDAwMGZmMDApID4+PiA4O1xuICAgIGNvbnN0IGE6IG51bWJlciA9IChub3JtYWxpemVkQ29sb3IgJiAweDAwMDAwMGZmKSAvIDI1NTtcblxuICAgIHJldHVybiB7ciwgZywgYiwgYX07XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNSZ2JhVmFsdWUodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIHZhbHVlICYmXG4gICAgdHlwZW9mIHZhbHVlLnIgPT09ICdudW1iZXInICYmXG4gICAgdHlwZW9mIHZhbHVlLmcgPT09ICdudW1iZXInICYmXG4gICAgdHlwZW9mIHZhbHVlLmIgPT09ICdudW1iZXInICYmXG4gICAgdHlwZW9mIHZhbHVlLmEgPT09ICdudW1iZXInXG4gICk7XG59XG5cbmZ1bmN0aW9uIGlzUmdiYUFuaW1hdGVkVmFsdWUodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIHZhbHVlICYmXG4gICAgdmFsdWUuciBpbnN0YW5jZW9mIEFuaW1hdGVkVmFsdWUgJiZcbiAgICB2YWx1ZS5nIGluc3RhbmNlb2YgQW5pbWF0ZWRWYWx1ZSAmJlxuICAgIHZhbHVlLmIgaW5zdGFuY2VvZiBBbmltYXRlZFZhbHVlICYmXG4gICAgdmFsdWUuYSBpbnN0YW5jZW9mIEFuaW1hdGVkVmFsdWVcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5pbWF0ZWRDb2xvciBleHRlbmRzIEFuaW1hdGVkV2l0aENoaWxkcmVuIHtcbiAgcjogQW5pbWF0ZWRWYWx1ZTtcbiAgZzogQW5pbWF0ZWRWYWx1ZTtcbiAgYjogQW5pbWF0ZWRWYWx1ZTtcbiAgYTogQW5pbWF0ZWRWYWx1ZTtcbiAgbmF0aXZlQ29sb3I6ID9OYXRpdmVDb2xvclZhbHVlO1xuICBfbGlzdGVuZXJzOiB7XG4gICAgW2tleTogc3RyaW5nXToge1xuICAgICAgcjogc3RyaW5nLFxuICAgICAgZzogc3RyaW5nLFxuICAgICAgYjogc3RyaW5nLFxuICAgICAgYTogc3RyaW5nLFxuICAgICAgLi4uXG4gICAgfSxcbiAgICAuLi5cbiAgfSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHZhbHVlSW4/OiA/KFJnYmFWYWx1ZSB8IFJnYmFBbmltYXRlZFZhbHVlIHwgQ29sb3JWYWx1ZSksXG4gICAgY29uZmlnPzogP0FuaW1hdGVkQ29sb3JDb25maWcsXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgbGV0IHZhbHVlOiBSZ2JhVmFsdWUgfCBSZ2JhQW5pbWF0ZWRWYWx1ZSB8IENvbG9yVmFsdWUgPVxuICAgICAgdmFsdWVJbiA/PyBkZWZhdWx0Q29sb3I7XG4gICAgaWYgKGlzUmdiYUFuaW1hdGVkVmFsdWUodmFsdWUpKSB7XG4gICAgICAvLyAkRmxvd0lnbm9yZVtpbmNvbXBhdGlibGUtY2FzdF0gLSBUeXBlIGlzIHZlcmlmaWVkIGFib3ZlXG4gICAgICBjb25zdCByZ2JhQW5pbWF0ZWRWYWx1ZTogUmdiYUFuaW1hdGVkVmFsdWUgPSAodmFsdWU6IFJnYmFBbmltYXRlZFZhbHVlKTtcbiAgICAgIHRoaXMuciA9IHJnYmFBbmltYXRlZFZhbHVlLnI7XG4gICAgICB0aGlzLmcgPSByZ2JhQW5pbWF0ZWRWYWx1ZS5nO1xuICAgICAgdGhpcy5iID0gcmdiYUFuaW1hdGVkVmFsdWUuYjtcbiAgICAgIHRoaXMuYSA9IHJnYmFBbmltYXRlZFZhbHVlLmE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHByb2Nlc3NlZENvbG9yOiBSZ2JhVmFsdWUgfCBOYXRpdmVDb2xvclZhbHVlID1cbiAgICAgICAgLy8gJEZsb3dJZ25vcmVbaW5jb21wYXRpYmxlLWNhc3RdIC0gVHlwZSBpcyB2ZXJpZmllZCBhYm92ZVxuICAgICAgICBwcm9jZXNzQ29sb3IoKHZhbHVlOiBDb2xvclZhbHVlIHwgUmdiYVZhbHVlKSkgPz8gZGVmYXVsdENvbG9yO1xuICAgICAgbGV0IGluaXRDb2xvcjogUmdiYVZhbHVlID0gZGVmYXVsdENvbG9yO1xuICAgICAgaWYgKGlzUmdiYVZhbHVlKHByb2Nlc3NlZENvbG9yKSkge1xuICAgICAgICAvLyAkRmxvd0lnbm9yZVtpbmNvbXBhdGlibGUtY2FzdF0gLSBUeXBlIGlzIHZlcmlmaWVkIGFib3ZlXG4gICAgICAgIGluaXRDb2xvciA9IChwcm9jZXNzZWRDb2xvcjogUmdiYVZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICRGbG93SWdub3JlW2luY29tcGF0aWJsZS1jYXN0XSAtIFR5cGUgaXMgdmVyaWZpZWQgYWJvdmVcbiAgICAgICAgdGhpcy5uYXRpdmVDb2xvciA9IChwcm9jZXNzZWRDb2xvcjogTmF0aXZlQ29sb3JWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuciA9IG5ldyBBbmltYXRlZFZhbHVlKGluaXRDb2xvci5yKTtcbiAgICAgIHRoaXMuZyA9IG5ldyBBbmltYXRlZFZhbHVlKGluaXRDb2xvci5nKTtcbiAgICAgIHRoaXMuYiA9IG5ldyBBbmltYXRlZFZhbHVlKGluaXRDb2xvci5iKTtcbiAgICAgIHRoaXMuYSA9IG5ldyBBbmltYXRlZFZhbHVlKGluaXRDb2xvci5hKTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmF0aXZlQ29sb3IgfHwgKGNvbmZpZyAmJiBjb25maWcudXNlTmF0aXZlRHJpdmVyKSkge1xuICAgICAgdGhpcy5fX21ha2VOYXRpdmUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGlyZWN0bHkgc2V0IHRoZSB2YWx1ZS4gVGhpcyB3aWxsIHN0b3AgYW55IGFuaW1hdGlvbnMgcnVubmluZyBvbiB0aGUgdmFsdWVcbiAgICogYW5kIHVwZGF0ZSBhbGwgdGhlIGJvdW5kIHByb3BlcnRpZXMuXG4gICAqL1xuICBzZXRWYWx1ZSh2YWx1ZTogUmdiYVZhbHVlIHwgQ29sb3JWYWx1ZSk6IHZvaWQge1xuICAgIGxldCBzaG91bGRVcGRhdGVOb2RlQ29uZmlnID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuX19pc05hdGl2ZSkge1xuICAgICAgY29uc3QgbmF0aXZlVGFnID0gdGhpcy5fX2dldE5hdGl2ZVRhZygpO1xuICAgICAgTmF0aXZlQW5pbWF0ZWRBUEkuc2V0V2FpdGluZ0ZvcklkZW50aWZpZXIobmF0aXZlVGFnLnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIGNvbnN0IHByb2Nlc3NlZENvbG9yOiBSZ2JhVmFsdWUgfCBOYXRpdmVDb2xvclZhbHVlID1cbiAgICAgIHByb2Nlc3NDb2xvcih2YWx1ZSkgPz8gZGVmYXVsdENvbG9yO1xuICAgIGlmIChpc1JnYmFWYWx1ZShwcm9jZXNzZWRDb2xvcikpIHtcbiAgICAgIC8vICRGbG93SWdub3JlW2luY29tcGF0aWJsZS10eXBlXSAtIFR5cGUgaXMgdmVyaWZpZWQgYWJvdmVcbiAgICAgIGNvbnN0IHJnYmFWYWx1ZTogUmdiYVZhbHVlID0gcHJvY2Vzc2VkQ29sb3I7XG4gICAgICB0aGlzLnIuc2V0VmFsdWUocmdiYVZhbHVlLnIpO1xuICAgICAgdGhpcy5nLnNldFZhbHVlKHJnYmFWYWx1ZS5nKTtcbiAgICAgIHRoaXMuYi5zZXRWYWx1ZShyZ2JhVmFsdWUuYik7XG4gICAgICB0aGlzLmEuc2V0VmFsdWUocmdiYVZhbHVlLmEpO1xuICAgICAgaWYgKHRoaXMubmF0aXZlQ29sb3IgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLm5hdGl2ZUNvbG9yID0gbnVsbDtcbiAgICAgICAgc2hvdWxkVXBkYXRlTm9kZUNvbmZpZyA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vICRGbG93SWdub3JlW2luY29tcGF0aWJsZS10eXBlXSAtIFR5cGUgaXMgdmVyaWZpZWQgYWJvdmVcbiAgICAgIGNvbnN0IG5hdGl2ZUNvbG9yOiBOYXRpdmVDb2xvclZhbHVlID0gcHJvY2Vzc2VkQ29sb3I7XG4gICAgICBpZiAodGhpcy5uYXRpdmVDb2xvciAhPT0gbmF0aXZlQ29sb3IpIHtcbiAgICAgICAgdGhpcy5uYXRpdmVDb2xvciA9IG5hdGl2ZUNvbG9yO1xuICAgICAgICBzaG91bGRVcGRhdGVOb2RlQ29uZmlnID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fX2lzTmF0aXZlKSB7XG4gICAgICBjb25zdCBuYXRpdmVUYWcgPSB0aGlzLl9fZ2V0TmF0aXZlVGFnKCk7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlTm9kZUNvbmZpZykge1xuICAgICAgICBOYXRpdmVBbmltYXRlZEFQSS51cGRhdGVBbmltYXRlZE5vZGVDb25maWcoXG4gICAgICAgICAgbmF0aXZlVGFnLFxuICAgICAgICAgIHRoaXMuX19nZXROYXRpdmVDb25maWcoKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIE5hdGl2ZUFuaW1hdGVkQVBJLnVuc2V0V2FpdGluZ0ZvcklkZW50aWZpZXIobmF0aXZlVGFnLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGFuIG9mZnNldCB0aGF0IGlzIGFwcGxpZWQgb24gdG9wIG9mIHdoYXRldmVyIHZhbHVlIGlzIHNldCwgd2hldGhlclxuICAgKiB2aWEgYHNldFZhbHVlYCwgYW4gYW5pbWF0aW9uLCBvciBgQW5pbWF0ZWQuZXZlbnRgLiBVc2VmdWwgZm9yIGNvbXBlbnNhdGluZ1xuICAgKiB0aGluZ3MgbGlrZSB0aGUgc3RhcnQgb2YgYSBwYW4gZ2VzdHVyZS5cbiAgICovXG4gIHNldE9mZnNldChvZmZzZXQ6IFJnYmFWYWx1ZSk6IHZvaWQge1xuICAgIHRoaXMuci5zZXRPZmZzZXQob2Zmc2V0LnIpO1xuICAgIHRoaXMuZy5zZXRPZmZzZXQob2Zmc2V0LmcpO1xuICAgIHRoaXMuYi5zZXRPZmZzZXQob2Zmc2V0LmIpO1xuICAgIHRoaXMuYS5zZXRPZmZzZXQob2Zmc2V0LmEpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlcyB0aGUgb2Zmc2V0IHZhbHVlIGludG8gdGhlIGJhc2UgdmFsdWUgYW5kIHJlc2V0cyB0aGUgb2Zmc2V0IHRvIHplcm8uXG4gICAqIFRoZSBmaW5hbCBvdXRwdXQgb2YgdGhlIHZhbHVlIGlzIHVuY2hhbmdlZC5cbiAgICovXG4gIGZsYXR0ZW5PZmZzZXQoKTogdm9pZCB7XG4gICAgdGhpcy5yLmZsYXR0ZW5PZmZzZXQoKTtcbiAgICB0aGlzLmcuZmxhdHRlbk9mZnNldCgpO1xuICAgIHRoaXMuYi5mbGF0dGVuT2Zmc2V0KCk7XG4gICAgdGhpcy5hLmZsYXR0ZW5PZmZzZXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBvZmZzZXQgdmFsdWUgdG8gdGhlIGJhc2UgdmFsdWUsIGFuZCByZXNldHMgdGhlIGJhc2UgdmFsdWUgdG9cbiAgICogemVyby4gVGhlIGZpbmFsIG91dHB1dCBvZiB0aGUgdmFsdWUgaXMgdW5jaGFuZ2VkLlxuICAgKi9cbiAgZXh0cmFjdE9mZnNldCgpOiB2b2lkIHtcbiAgICB0aGlzLnIuZXh0cmFjdE9mZnNldCgpO1xuICAgIHRoaXMuZy5leHRyYWN0T2Zmc2V0KCk7XG4gICAgdGhpcy5iLmV4dHJhY3RPZmZzZXQoKTtcbiAgICB0aGlzLmEuZXh0cmFjdE9mZnNldCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYW4gYXN5bmNocm9ub3VzIGxpc3RlbmVyIHRvIHRoZSB2YWx1ZSBzbyB5b3UgY2FuIG9ic2VydmUgdXBkYXRlcyBmcm9tXG4gICAqIGFuaW1hdGlvbnMuICBUaGlzIGlzIHVzZWZ1bCBiZWNhdXNlIHRoZXJlIGlzIG5vIHdheSB0byBzeW5jaHJvbm91c2x5IHJlYWRcbiAgICogdGhlIHZhbHVlIGJlY2F1c2UgaXQgbWlnaHQgYmUgZHJpdmVuIG5hdGl2ZWx5LlxuICAgKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgc2VydmVzIGFzIGFuIGlkZW50aWZpZXIgZm9yIHRoZSBsaXN0ZW5lci5cbiAgICovXG4gIGFkZExpc3RlbmVyKGNhbGxiYWNrOiBDb2xvckxpc3RlbmVyQ2FsbGJhY2spOiBzdHJpbmcge1xuICAgIGNvbnN0IGlkID0gU3RyaW5nKF91bmlxdWVJZCsrKTtcbiAgICBjb25zdCBqb2ludENhbGxiYWNrID0gKHt2YWx1ZTogbnVtYmVyfTogYW55KSA9PiB7XG4gICAgICBjYWxsYmFjayh0aGlzLl9fZ2V0VmFsdWUoKSk7XG4gICAgfTtcbiAgICB0aGlzLl9saXN0ZW5lcnNbaWRdID0ge1xuICAgICAgcjogdGhpcy5yLmFkZExpc3RlbmVyKGpvaW50Q2FsbGJhY2spLFxuICAgICAgZzogdGhpcy5nLmFkZExpc3RlbmVyKGpvaW50Q2FsbGJhY2spLFxuICAgICAgYjogdGhpcy5iLmFkZExpc3RlbmVyKGpvaW50Q2FsbGJhY2spLFxuICAgICAgYTogdGhpcy5hLmFkZExpc3RlbmVyKGpvaW50Q2FsbGJhY2spLFxuICAgIH07XG4gICAgcmV0dXJuIGlkO1xuICB9XG5cbiAgLyoqXG4gICAqIFVucmVnaXN0ZXIgYSBsaXN0ZW5lci4gVGhlIGBpZGAgcGFyYW0gc2hhbGwgbWF0Y2ggdGhlIGlkZW50aWZpZXJcbiAgICogcHJldmlvdXNseSByZXR1cm5lZCBieSBgYWRkTGlzdGVuZXIoKWAuXG4gICAqL1xuICByZW1vdmVMaXN0ZW5lcihpZDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5yLnJlbW92ZUxpc3RlbmVyKHRoaXMuX2xpc3RlbmVyc1tpZF0ucik7XG4gICAgdGhpcy5nLnJlbW92ZUxpc3RlbmVyKHRoaXMuX2xpc3RlbmVyc1tpZF0uZyk7XG4gICAgdGhpcy5iLnJlbW92ZUxpc3RlbmVyKHRoaXMuX2xpc3RlbmVyc1tpZF0uYik7XG4gICAgdGhpcy5hLnJlbW92ZUxpc3RlbmVyKHRoaXMuX2xpc3RlbmVyc1tpZF0uYSk7XG4gICAgZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1tpZF07XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFsbCByZWdpc3RlcmVkIGxpc3RlbmVycy5cbiAgICovXG4gIHJlbW92ZUFsbExpc3RlbmVycygpOiB2b2lkIHtcbiAgICB0aGlzLnIucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgdGhpcy5nLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgIHRoaXMuYi5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLmEucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG4gIH1cblxuICAvKipcbiAgICogU3RvcHMgYW55IHJ1bm5pbmcgYW5pbWF0aW9uIG9yIHRyYWNraW5nLiBgY2FsbGJhY2tgIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICogZmluYWwgdmFsdWUgYWZ0ZXIgc3RvcHBpbmcgdGhlIGFuaW1hdGlvbiwgd2hpY2ggaXMgdXNlZnVsIGZvciB1cGRhdGluZ1xuICAgKiBzdGF0ZSB0byBtYXRjaCB0aGUgYW5pbWF0aW9uIHBvc2l0aW9uIHdpdGggbGF5b3V0LlxuICAgKi9cbiAgc3RvcEFuaW1hdGlvbihjYWxsYmFjaz86IENvbG9yTGlzdGVuZXJDYWxsYmFjayk6IHZvaWQge1xuICAgIHRoaXMuci5zdG9wQW5pbWF0aW9uKCk7XG4gICAgdGhpcy5nLnN0b3BBbmltYXRpb24oKTtcbiAgICB0aGlzLmIuc3RvcEFuaW1hdGlvbigpO1xuICAgIHRoaXMuYS5zdG9wQW5pbWF0aW9uKCk7XG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sodGhpcy5fX2dldFZhbHVlKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3BzIGFueSBhbmltYXRpb24gYW5kIHJlc2V0cyB0aGUgdmFsdWUgdG8gaXRzIG9yaWdpbmFsLlxuICAgKi9cbiAgcmVzZXRBbmltYXRpb24oY2FsbGJhY2s/OiBDb2xvckxpc3RlbmVyQ2FsbGJhY2spOiB2b2lkIHtcbiAgICB0aGlzLnIucmVzZXRBbmltYXRpb24oKTtcbiAgICB0aGlzLmcucmVzZXRBbmltYXRpb24oKTtcbiAgICB0aGlzLmIucmVzZXRBbmltYXRpb24oKTtcbiAgICB0aGlzLmEucmVzZXRBbmltYXRpb24oKTtcbiAgICBjYWxsYmFjayAmJiBjYWxsYmFjayh0aGlzLl9fZ2V0VmFsdWUoKSk7XG4gIH1cblxuICBfX2dldFZhbHVlKCk6IENvbG9yVmFsdWUge1xuICAgIGlmICh0aGlzLm5hdGl2ZUNvbG9yICE9IG51bGwpIHtcbiAgICAgIHJldHVybiB0aGlzLm5hdGl2ZUNvbG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYHJnYmEoJHt0aGlzLnIuX19nZXRWYWx1ZSgpfSwgJHt0aGlzLmcuX19nZXRWYWx1ZSgpfSwgJHt0aGlzLmIuX19nZXRWYWx1ZSgpfSwgJHt0aGlzLmEuX19nZXRWYWx1ZSgpfSlgO1xuICAgIH1cbiAgfVxuXG4gIF9fYXR0YWNoKCk6IHZvaWQge1xuICAgIHRoaXMuci5fX2FkZENoaWxkKHRoaXMpO1xuICAgIHRoaXMuZy5fX2FkZENoaWxkKHRoaXMpO1xuICAgIHRoaXMuYi5fX2FkZENoaWxkKHRoaXMpO1xuICAgIHRoaXMuYS5fX2FkZENoaWxkKHRoaXMpO1xuICAgIHN1cGVyLl9fYXR0YWNoKCk7XG4gIH1cblxuICBfX2RldGFjaCgpOiB2b2lkIHtcbiAgICB0aGlzLnIuX19yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICB0aGlzLmcuX19yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICB0aGlzLmIuX19yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICB0aGlzLmEuX19yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICBzdXBlci5fX2RldGFjaCgpO1xuICB9XG5cbiAgX19tYWtlTmF0aXZlKHBsYXRmb3JtQ29uZmlnOiA/UGxhdGZvcm1Db25maWcpIHtcbiAgICB0aGlzLnIuX19tYWtlTmF0aXZlKHBsYXRmb3JtQ29uZmlnKTtcbiAgICB0aGlzLmcuX19tYWtlTmF0aXZlKHBsYXRmb3JtQ29uZmlnKTtcbiAgICB0aGlzLmIuX19tYWtlTmF0aXZlKHBsYXRmb3JtQ29uZmlnKTtcbiAgICB0aGlzLmEuX19tYWtlTmF0aXZlKHBsYXRmb3JtQ29uZmlnKTtcbiAgICBzdXBlci5fX21ha2VOYXRpdmUocGxhdGZvcm1Db25maWcpO1xuICB9XG5cbiAgX19nZXROYXRpdmVDb25maWcoKTogey4uLn0ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnY29sb3InLFxuICAgICAgcjogdGhpcy5yLl9fZ2V0TmF0aXZlVGFnKCksXG4gICAgICBnOiB0aGlzLmcuX19nZXROYXRpdmVUYWcoKSxcbiAgICAgIGI6IHRoaXMuYi5fX2dldE5hdGl2ZVRhZygpLFxuICAgICAgYTogdGhpcy5hLl9fZ2V0TmF0aXZlVGFnKCksXG4gICAgICBuYXRpdmVDb2xvcjogdGhpcy5uYXRpdmVDb2xvcixcbiAgICB9O1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQUMsT0FBQTtFQUFBQyxLQUFBO0FBQUE7QUFBQUQsT0FBQSxDQUFBRSxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFPLGFBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFRLEtBQUEsR0FBQVQsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFTLFVBQUEsR0FBQVYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFVLDJCQUFBLEdBQUFYLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBVyxnQkFBQSxHQUFBWixzQkFBQSxDQUFBQyxPQUFBO0FBT2IsSUFBQVksZUFBQSxHQUFBYixz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