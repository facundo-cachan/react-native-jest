dba143a2ad78618a6a82715445aa3b7f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _RCTDeviceEventEmitter = _interopRequireDefault(require("../EventEmitter/RCTDeviceEventEmitter"));
var _EventEmitter = _interopRequireDefault(require("../vendor/emitter/EventEmitter"));
var _NativeDeviceInfo = _interopRequireDefault(require("./NativeDeviceInfo"));
var _invariant = _interopRequireDefault(require("invariant"));
var eventEmitter = new _EventEmitter.default();
var dimensionsInitialized = false;
var dimensions;
var Dimensions = function () {
  function Dimensions() {
    (0, _classCallCheck2.default)(this, Dimensions);
  }
  (0, _createClass2.default)(Dimensions, null, [{
    key: "get",
    value: function get(dim) {
      (0, _invariant.default)(dimensions[dim], 'No dimension set for key ' + dim);
      return dimensions[dim];
    }
  }, {
    key: "set",
    value: function set(dims) {
      var screen = dims.screen,
        window = dims.window;
      var windowPhysicalPixels = dims.windowPhysicalPixels;
      if (windowPhysicalPixels) {
        window = {
          width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
          height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
          scale: windowPhysicalPixels.scale,
          fontScale: windowPhysicalPixels.fontScale
        };
      }
      var screenPhysicalPixels = dims.screenPhysicalPixels;
      if (screenPhysicalPixels) {
        screen = {
          width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
          height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
          scale: screenPhysicalPixels.scale,
          fontScale: screenPhysicalPixels.fontScale
        };
      } else if (screen == null) {
        screen = window;
      }
      dimensions = {
        window: window,
        screen: screen
      };
      if (dimensionsInitialized) {
        eventEmitter.emit('change', dimensions);
      } else {
        dimensionsInitialized = true;
      }
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(type, handler) {
      (0, _invariant.default)(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
      return eventEmitter.addListener(type, handler);
    }
  }]);
  return Dimensions;
}();
var initialDims = global.nativeExtensions && global.nativeExtensions.DeviceInfo && global.nativeExtensions.DeviceInfo.Dimensions;
if (!initialDims) {
  _RCTDeviceEventEmitter.default.addListener('didUpdateDimensions', function (update) {
    Dimensions.set(update);
  });
  initialDims = _NativeDeviceInfo.default.getConstants().Dimensions;
}
Dimensions.set(initialDims);
module.exports = Dimensions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUkNURGV2aWNlRXZlbnRFbWl0dGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfRXZlbnRFbWl0dGVyIiwiX05hdGl2ZURldmljZUluZm8iLCJfaW52YXJpYW50IiwiZXZlbnRFbWl0dGVyIiwiRXZlbnRFbWl0dGVyIiwiZGltZW5zaW9uc0luaXRpYWxpemVkIiwiZGltZW5zaW9ucyIsIkRpbWVuc2lvbnMiLCJfY2xhc3NDYWxsQ2hlY2syIiwiZGVmYXVsdCIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsImdldCIsImRpbSIsImludmFyaWFudCIsInNldCIsImRpbXMiLCJzY3JlZW4iLCJ3aW5kb3ciLCJ3aW5kb3dQaHlzaWNhbFBpeGVscyIsIndpZHRoIiwic2NhbGUiLCJoZWlnaHQiLCJmb250U2NhbGUiLCJzY3JlZW5QaHlzaWNhbFBpeGVscyIsImVtaXQiLCJhZGRFdmVudExpc3RlbmVyIiwidHlwZSIsImhhbmRsZXIiLCJhZGRMaXN0ZW5lciIsImluaXRpYWxEaW1zIiwiZ2xvYmFsIiwibmF0aXZlRXh0ZW5zaW9ucyIsIkRldmljZUluZm8iLCJSQ1REZXZpY2VFdmVudEVtaXR0ZXIiLCJ1cGRhdGUiLCJOYXRpdmVEZXZpY2VJbmZvIiwiZ2V0Q29uc3RhbnRzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkRpbWVuc2lvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IFJDVERldmljZUV2ZW50RW1pdHRlciBmcm9tICcuLi9FdmVudEVtaXR0ZXIvUkNURGV2aWNlRXZlbnRFbWl0dGVyJztcbmltcG9ydCBFdmVudEVtaXR0ZXIsIHtcbiAgdHlwZSBFdmVudFN1YnNjcmlwdGlvbixcbn0gZnJvbSAnLi4vdmVuZG9yL2VtaXR0ZXIvRXZlbnRFbWl0dGVyJztcbmltcG9ydCBOYXRpdmVEZXZpY2VJbmZvLCB7XG4gIHR5cGUgRGltZW5zaW9uc1BheWxvYWQsXG4gIHR5cGUgRGlzcGxheU1ldHJpY3MsXG4gIHR5cGUgRGlzcGxheU1ldHJpY3NBbmRyb2lkLFxufSBmcm9tICcuL05hdGl2ZURldmljZUluZm8nO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG5jb25zdCBldmVudEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPHtcbiAgY2hhbmdlOiBbRGltZW5zaW9uc1BheWxvYWRdLFxufT4oKTtcbmxldCBkaW1lbnNpb25zSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbmxldCBkaW1lbnNpb25zOiBEaW1lbnNpb25zUGF5bG9hZDtcblxuY2xhc3MgRGltZW5zaW9ucyB7XG4gIC8qKlxuICAgKiBOT1RFOiBgdXNlV2luZG93RGltZW5zaW9uc2AgaXMgdGhlIHByZWZlcnJlZCBBUEkgZm9yIFJlYWN0IGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEluaXRpYWwgZGltZW5zaW9ucyBhcmUgc2V0IGJlZm9yZSBgcnVuQXBwbGljYXRpb25gIGlzIGNhbGxlZCBzbyB0aGV5IHNob3VsZFxuICAgKiBiZSBhdmFpbGFibGUgYmVmb3JlIGFueSBvdGhlciByZXF1aXJlJ3MgYXJlIHJ1biwgYnV0IG1heSBiZSB1cGRhdGVkIGxhdGVyLlxuICAgKlxuICAgKiBOb3RlOiBBbHRob3VnaCBkaW1lbnNpb25zIGFyZSBhdmFpbGFibGUgaW1tZWRpYXRlbHksIHRoZXkgbWF5IGNoYW5nZSAoZS5nXG4gICAqIGR1ZSB0byBkZXZpY2Ugcm90YXRpb24pIHNvIGFueSByZW5kZXJpbmcgbG9naWMgb3Igc3R5bGVzIHRoYXQgZGVwZW5kIG9uXG4gICAqIHRoZXNlIGNvbnN0YW50cyBzaG91bGQgdHJ5IHRvIGNhbGwgdGhpcyBmdW5jdGlvbiBvbiBldmVyeSByZW5kZXIsIHJhdGhlclxuICAgKiB0aGFuIGNhY2hpbmcgdGhlIHZhbHVlIChmb3IgZXhhbXBsZSwgdXNpbmcgaW5saW5lIHN0eWxlcyByYXRoZXIgdGhhblxuICAgKiBzZXR0aW5nIGEgdmFsdWUgaW4gYSBgU3R5bGVTaGVldGApLlxuICAgKlxuICAgKiBFeGFtcGxlOiBgY29uc3Qge2hlaWdodCwgd2lkdGh9ID0gRGltZW5zaW9ucy5nZXQoJ3dpbmRvdycpO2BcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRpbSBOYW1lIG9mIGRpbWVuc2lvbiBhcyBkZWZpbmVkIHdoZW4gY2FsbGluZyBgc2V0YC5cbiAgICogQHJldHVybnMge0Rpc3BsYXlNZXRyaWNzPyB8IERpc3BsYXlNZXRyaWNzQW5kcm9pZD99IFZhbHVlIGZvciB0aGUgZGltZW5zaW9uLlxuICAgKi9cbiAgc3RhdGljIGdldChkaW06IHN0cmluZyk6IERpc3BsYXlNZXRyaWNzIHwgRGlzcGxheU1ldHJpY3NBbmRyb2lkIHtcbiAgICBpbnZhcmlhbnQoZGltZW5zaW9uc1tkaW1dLCAnTm8gZGltZW5zaW9uIHNldCBmb3Iga2V5ICcgKyBkaW0pO1xuICAgIHJldHVybiBkaW1lbnNpb25zW2RpbV07XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBzaG91bGQgb25seSBiZSBjYWxsZWQgZnJvbSBuYXRpdmUgY29kZSBieSBzZW5kaW5nIHRoZVxuICAgKiBkaWRVcGRhdGVEaW1lbnNpb25zIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge0RpbWVuc2lvbnNQYXlsb2FkfSBkaW1zIFNpbXBsZSBzdHJpbmcta2V5ZWQgb2JqZWN0IG9mIGRpbWVuc2lvbnMgdG8gc2V0XG4gICAqL1xuICBzdGF0aWMgc2V0KGRpbXM6ICRSZWFkT25seTxEaW1lbnNpb25zUGF5bG9hZD4pOiB2b2lkIHtcbiAgICAvLyBXZSBjYWxjdWxhdGUgdGhlIHdpbmRvdyBkaW1lbnNpb25zIGluIEpTIHNvIHRoYXQgd2UgZG9uJ3QgZW5jb3VudGVyIGxvc3Mgb2ZcbiAgICAvLyBwcmVjaXNpb24gaW4gdHJhbnNmZXJyaW5nIHRoZSBkaW1lbnNpb25zICh3aGljaCBjb3VsZCBiZSBub24taW50ZWdlcnMpIG92ZXJcbiAgICAvLyB0aGUgYnJpZGdlLlxuICAgIGxldCB7c2NyZWVuLCB3aW5kb3d9ID0gZGltcztcbiAgICBjb25zdCB7d2luZG93UGh5c2ljYWxQaXhlbHN9ID0gZGltcztcbiAgICBpZiAod2luZG93UGh5c2ljYWxQaXhlbHMpIHtcbiAgICAgIHdpbmRvdyA9IHtcbiAgICAgICAgd2lkdGg6IHdpbmRvd1BoeXNpY2FsUGl4ZWxzLndpZHRoIC8gd2luZG93UGh5c2ljYWxQaXhlbHMuc2NhbGUsXG4gICAgICAgIGhlaWdodDogd2luZG93UGh5c2ljYWxQaXhlbHMuaGVpZ2h0IC8gd2luZG93UGh5c2ljYWxQaXhlbHMuc2NhbGUsXG4gICAgICAgIHNjYWxlOiB3aW5kb3dQaHlzaWNhbFBpeGVscy5zY2FsZSxcbiAgICAgICAgZm9udFNjYWxlOiB3aW5kb3dQaHlzaWNhbFBpeGVscy5mb250U2NhbGUsXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB7c2NyZWVuUGh5c2ljYWxQaXhlbHN9ID0gZGltcztcbiAgICBpZiAoc2NyZWVuUGh5c2ljYWxQaXhlbHMpIHtcbiAgICAgIHNjcmVlbiA9IHtcbiAgICAgICAgd2lkdGg6IHNjcmVlblBoeXNpY2FsUGl4ZWxzLndpZHRoIC8gc2NyZWVuUGh5c2ljYWxQaXhlbHMuc2NhbGUsXG4gICAgICAgIGhlaWdodDogc2NyZWVuUGh5c2ljYWxQaXhlbHMuaGVpZ2h0IC8gc2NyZWVuUGh5c2ljYWxQaXhlbHMuc2NhbGUsXG4gICAgICAgIHNjYWxlOiBzY3JlZW5QaHlzaWNhbFBpeGVscy5zY2FsZSxcbiAgICAgICAgZm9udFNjYWxlOiBzY3JlZW5QaHlzaWNhbFBpeGVscy5mb250U2NhbGUsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoc2NyZWVuID09IG51bGwpIHtcbiAgICAgIHNjcmVlbiA9IHdpbmRvdztcbiAgICB9XG5cbiAgICBkaW1lbnNpb25zID0ge3dpbmRvdywgc2NyZWVufTtcbiAgICBpZiAoZGltZW5zaW9uc0luaXRpYWxpemVkKSB7XG4gICAgICAvLyBEb24ndCBmaXJlICdjaGFuZ2UnIHRoZSBmaXJzdCB0aW1lIHRoZSBkaW1lbnNpb25zIGFyZSBzZXQuXG4gICAgICBldmVudEVtaXR0ZXIuZW1pdCgnY2hhbmdlJywgZGltZW5zaW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpbWVuc2lvbnNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhbiBldmVudCBoYW5kbGVyLiBTdXBwb3J0ZWQgZXZlbnRzOlxuICAgKlxuICAgKiAtIGBjaGFuZ2VgOiBGaXJlcyB3aGVuIGEgcHJvcGVydHkgd2l0aGluIHRoZSBgRGltZW5zaW9uc2Agb2JqZWN0IGNoYW5nZXMuIFRoZSBhcmd1bWVudFxuICAgKiAgIHRvIHRoZSBldmVudCBoYW5kbGVyIGlzIGFuIG9iamVjdCB3aXRoIGB3aW5kb3dgIGFuZCBgc2NyZWVuYCBwcm9wZXJ0aWVzIHdob3NlIHZhbHVlc1xuICAgKiAgIGFyZSB0aGUgc2FtZSBhcyB0aGUgcmV0dXJuIHZhbHVlcyBvZiBgRGltZW5zaW9ucy5nZXQoJ3dpbmRvdycpYCBhbmRcbiAgICogICBgRGltZW5zaW9ucy5nZXQoJ3NjcmVlbicpYCwgcmVzcGVjdGl2ZWx5LlxuICAgKi9cbiAgc3RhdGljIGFkZEV2ZW50TGlzdGVuZXIoXG4gICAgdHlwZTogJ2NoYW5nZScsXG4gICAgaGFuZGxlcjogRnVuY3Rpb24sXG4gICk6IEV2ZW50U3Vic2NyaXB0aW9uIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlID09PSAnY2hhbmdlJyxcbiAgICAgICdUcnlpbmcgdG8gc3Vic2NyaWJlIHRvIHVua25vd24gZXZlbnQ6IFwiJXNcIicsXG4gICAgICB0eXBlLFxuICAgICk7XG4gICAgcmV0dXJuIGV2ZW50RW1pdHRlci5hZGRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyKTtcbiAgfVxufVxuXG5sZXQgaW5pdGlhbERpbXM6ID8kUmVhZE9ubHk8RGltZW5zaW9uc1BheWxvYWQ+ID1cbiAgZ2xvYmFsLm5hdGl2ZUV4dGVuc2lvbnMgJiZcbiAgZ2xvYmFsLm5hdGl2ZUV4dGVuc2lvbnMuRGV2aWNlSW5mbyAmJlxuICBnbG9iYWwubmF0aXZlRXh0ZW5zaW9ucy5EZXZpY2VJbmZvLkRpbWVuc2lvbnM7XG5pZiAoIWluaXRpYWxEaW1zKSB7XG4gIC8vIFN1YnNjcmliZSBiZWZvcmUgY2FsbGluZyBnZXRDb25zdGFudHMgdG8gbWFrZSBzdXJlIHdlIGRvbid0IG1pc3MgYW55IHVwZGF0ZXMgaW4gYmV0d2Vlbi5cbiAgUkNURGV2aWNlRXZlbnRFbWl0dGVyLmFkZExpc3RlbmVyKFxuICAgICdkaWRVcGRhdGVEaW1lbnNpb25zJyxcbiAgICAodXBkYXRlOiBEaW1lbnNpb25zUGF5bG9hZCkgPT4ge1xuICAgICAgRGltZW5zaW9ucy5zZXQodXBkYXRlKTtcbiAgICB9LFxuICApO1xuICBpbml0aWFsRGltcyA9IE5hdGl2ZURldmljZUluZm8uZ2V0Q29uc3RhbnRzKCkuRGltZW5zaW9ucztcbn1cblxuRGltZW5zaW9ucy5zZXQoaW5pdGlhbERpbXMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERpbWVuc2lvbnM7XG4iXSwibWFwcGluZ3MiOiI7OztBQVVBLElBQUFBLHNCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFHQSxJQUFBRSxpQkFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBS0EsSUFBQUcsVUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBTUksWUFBWSxHQUFHLElBQUlDLHFCQUFZLENBRWxDLENBQUM7QUFDSixJQUFJQyxxQkFBcUIsR0FBRyxL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