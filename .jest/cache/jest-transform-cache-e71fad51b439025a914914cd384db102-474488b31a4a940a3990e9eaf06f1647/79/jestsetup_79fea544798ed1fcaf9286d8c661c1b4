dd3697756a7f0222c8e6acca5409d51d
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.default.call = function () {};
  return Reanimated;
});
_getJestObj().mock('@react-navigation/native', function () {
  var actualNav = jest.requireActual('@react-navigation/native');
  return Object.assign({}, actualNav, {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn()
      };
    }
  });
});
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _extendExpect = require("@testing-library/jest-native/extend-expect");
Object.keys(_extendExpect).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _extendExpect[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _extendExpect[key];
    }
  });
});
require("react-native-gesture-handler/jestSetup");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
jest.spyOn(console, 'error').mockImplementation(function () {});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSZWFuaW1hdGVkIiwicmVxdWlyZSIsImRlZmF1bHQiLCJjYWxsIiwiYWN0dWFsTmF2IiwiamVzdCIsInJlcXVpcmVBY3R1YWwiLCJPYmplY3QiLCJhc3NpZ24iLCJ1c2VOYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJmbiIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2V4dGVuZEV4cGVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwiZW51bWVyYWJsZSIsImdldCIsIl9yZXF1aXJlIiwidXNlRmFrZVRpbWVycyIsInNweU9uIiwiY29uc29sZSIsIm1vY2tJbXBsZW1lbnRhdGlvbiJdLCJzb3VyY2VzIjpbImplc3Quc2V0dXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IG5vY2sgZnJvbSAnbm9jayc7XG5cbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcbmltcG9ydCAncmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9qZXN0U2V0dXAnO1xuXG4vLyBub2NrLmRpc2FibGVOZXRDb25uZWN0KCk7XG5qZXN0LnVzZUZha2VUaW1lcnMoKTtcblxuamVzdC5zcHlPbihjb25zb2xlLCAnZXJyb3InKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pO1xuXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQnLCAoKSA9PiB7XG4gIGNvbnN0IFJlYW5pbWF0ZWQgPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUtcmVhbmltYXRlZC9tb2NrJyk7XG4gIFJlYW5pbWF0ZWQuZGVmYXVsdC5jYWxsID0gKCkgPT4ge307XG4gIHJldHVybiBSZWFuaW1hdGVkO1xufSk7XG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcbiAgY29uc3QgYWN0dWFsTmF2ID0gamVzdC5yZXF1aXJlQWN0dWFsKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5hY3R1YWxOYXYsXG4gICAgdXNlTmF2aWdhdGlvbjogKCkgPT4gKHtcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgfSksXG4gIH07XG59KTtcblxuZXhwb3J0ICogZnJvbSAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcbiJdLCJtYXBwaW5ncyI6Ijs7QUFVQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsc0RBQXNELENBQUM7QUFDakVELFdBQUEsR0FBS0MsSUFBSSxDQUFDLHlCQUF5QixFQUFFLFlBQU07RUFDekMsSUFBTUMsVUFBVSxHQUFHQyxPQUFPLENBQUMsOEJBQThCLENBQUM7RUFDMURELFVBQVUsQ0FBQ0UsT0FBTyxDQUFDQyxJQUFJLEdBQUcsWUFBTSxDQUFDLENBQUM7RUFDbEMsT0FBT0gsVUFBVTtBQUNuQixDQUFDLENBQUM7QUFDRkYsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxJQUFNSyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLDBCQUEwQixDQUFDO0VBQ2hFLE9BQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUNLSixTQUFTO0lBQ1pLLGFBQWEsRUFBRSxTQUFBQSxjQUFBO01BQUEsT0FBTztRQUNwQkMsUUFBUSxFQUFFTCxJQUFJLENBQUNNLEVBQUUsQ0FBQztNQUNwQixDQUFDO0lBQUE7RUFBQztBQUVOLENBQUMsQ0FBQztBQUFDSixNQUFBLENBQUFLLGNBQUEsQ0FBQUMsT0FBQTtFQUFBQyxLQUFBO0FBQUE7QUF0QkgsSUFBQUMsYUFBQSxHQUFBZCxPQUFBO0FBd0JBTSxNQUFBLENBQUFTLElBQUEsQ0FBQUQsYUFBQSxFQUFBRSxPQUFBLFdBQUFDLEdBQUE7RUFBQSxJQUFBQSxHQUFBLGtCQUFBQSxHQUFBO0VBQUEsSUFBQUEsR0FBQSxJQUFBTCxPQUFBLElBQUFBLE9BQUEsQ0FBQUssR0FBQSxNQUFBSCxhQUFBLENBQUFHLEdBQUE7RUFBQVgsTUFBQSxDQUFBSyxjQUFBLENBQUFDLE9BQUEsRUFBQUssR0FBQTtJQUFBQyxVQUFBO0lBQUFDLEdBQUEsV0FBQUEsSUFBQTtNQUFBLE9BQUFMLGFBQUEsQ0FBQUcsR0FBQTtJQUFBO0VBQUE7QUFBQTtBQXZCQWpCLE9BQUE7QUFBZ0QsU0FBQUgsWUFBQTtFQUFBLElBQUF1QixRQUFBLEdBQUFwQixPQUFBO0lBQUFJLElBQUEsR0FBQWdCLFFBQUEsQ0FBQWhCLElBQUE7RUFBQVAsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQU8sSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBR2hEQSxJQUFJLENBQUNpQixhQUFhLENBQUMsQ0FBQztBQUVwQmpCLElBQUksQ0FBQ2tCLEtBQUssQ0FBQ0MsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDQyxrQkFBa0IsQ0FBQyxZQUFNLENBQUMsQ0FBQyxDQUFDIn0=