f24d6c6fc29d0087a77526dbe1abf6a5
_getJestObj().mock('axios');
_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return _asyncStorageMock.default;
});
_getJestObj().mock('react-native-vector-icons/FontAwesome5', function () {
  return {
    TabBarItemIOS: '',
    ToolbarAndroid: ''
  };
});
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.default.call = function () {};
  return Reanimated;
});
_getJestObj().mock('@react-navigation/native', function () {
  var actualNav = jest.requireActual('@react-navigation/native');
  return Object.assign({}, actualNav, {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn()
      };
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _asyncStorageMock = _interopRequireDefault(require("@react-native-async-storage/async-storage/jest/async-storage-mock"));
var _extendExpect = require("@testing-library/jest-native/extend-expect");
Object.keys(_extendExpect).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _extendExpect[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _extendExpect[key];
    }
  });
});
require("react-native-gesture-handler/jestSetup");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
jest.spyOn(console, 'error').mockImplementation(function () {});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJtb2NrQXN5bmNTdG9yYWdlIiwiVGFiQmFySXRlbUlPUyIsIlRvb2xiYXJBbmRyb2lkIiwiUmVhbmltYXRlZCIsInJlcXVpcmUiLCJkZWZhdWx0IiwiY2FsbCIsImFjdHVhbE5hdiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiT2JqZWN0IiwiYXNzaWduIiwidXNlTmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwiZm4iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfYXN5bmNTdG9yYWdlTW9jayIsIl9leHRlbmRFeHBlY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImVudW1lcmFibGUiLCJnZXQiLCJfcmVxdWlyZSIsInVzZUZha2VUaW1lcnMiLCJzcHlPbiIsImNvbnNvbGUiLCJtb2NrSW1wbGVtZW50YXRpb24iXSwic291cmNlcyI6WyJqZXN0LnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCBub2NrIGZyb20gJ25vY2snO1xuaW1wb3J0IG1vY2tBc3luY1N0b3JhZ2UgZnJvbSAnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UvamVzdC9hc3luYy1zdG9yYWdlLW1vY2snO1xuXG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1uYXRpdmUvZXh0ZW5kLWV4cGVjdCc7XG5pbXBvcnQgJ3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvamVzdFNldHVwJztcblxuLy8gbm9jay5kaXNhYmxlTmV0Q29ubmVjdCgpO1xuamVzdC51c2VGYWtlVGltZXJzKCk7XG5cbmplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcblxuamVzdC5tb2NrKCdheGlvcycpO1xuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUvTGlicmFyaWVzL0FuaW1hdGVkL05hdGl2ZUFuaW1hdGVkSGVscGVyJyk7XG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJywgKCkgPT4gbW9ja0FzeW5jU3RvcmFnZSk7XG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS12ZWN0b3ItaWNvbnMvRm9udEF3ZXNvbWU1JywgKCkgPT4gKHtcbiAgVGFiQmFySXRlbUlPUzogJycsXG4gIFRvb2xiYXJBbmRyb2lkOiAnJyxcbn0pKTtcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQnLCAoKSA9PiB7XG4gIGNvbnN0IFJlYW5pbWF0ZWQgPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUtcmVhbmltYXRlZC9tb2NrJyk7XG4gIFJlYW5pbWF0ZWQuZGVmYXVsdC5jYWxsID0gKCkgPT4ge307XG4gIHJldHVybiBSZWFuaW1hdGVkO1xufSk7XG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcbiAgY29uc3QgYWN0dWFsTmF2ID0gamVzdC5yZXF1aXJlQWN0dWFsKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5hY3R1YWxOYXYsXG4gICAgdXNlTmF2aWdhdGlvbjogKCkgPT4gKHtcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgfSksXG4gIH07XG59KTtcblxuZXhwb3J0ICogZnJvbSAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcbiJdLCJtYXBwaW5ncyI6IkFBV0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUNsQkQsV0FBQSxHQUFLQyxJQUFJLENBQUMsc0RBQXNELENBQUM7QUFDakVELFdBQUEsR0FBS0MsSUFBSSxDQUFDLDJDQUEyQyxFQUFFO0VBQUEsT0FBTUMseUJBQWdCO0FBQUEsRUFBQztBQUM5RUYsV0FBQSxHQUFLQyxJQUFJLENBQUMsd0NBQXdDLEVBQUU7RUFBQSxPQUFPO0lBQ3pERSxhQUFhLEVBQUUsRUFBRTtJQUNqQkMsY0FBYyxFQUFFO0VBQ2xCLENBQUM7QUFBQSxDQUFDLENBQUM7QUFDSEosV0FBQSxHQUFLQyxJQUFJLENBQUMseUJBQXlCLEVBQUUsWUFBTTtFQUN6QyxJQUFNSSxVQUFVLEdBQUdDLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQztFQUMxREQsVUFBVSxDQUFDRSxPQUFPLENBQUNDLElBQUksR0FBRyxZQUFNLENBQUMsQ0FBQztFQUNsQyxPQUFPSCxVQUFVO0FBQ25CLENBQUMsQ0FBQztBQUNGTCxXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxZQUFNO0VBQzFDLElBQU1RLFNBQVMsR0FBR0MsSUFBSSxDQUFDQyxhQUFhLENBQUMsMEJBQTBCLENBQUM7RUFDaEUsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ0tKLFNBQVM7SUFDWkssYUFBYSxFQUFFLFNBQUFBLGNBQUE7TUFBQSxPQUFPO1FBQ3BCQyxRQUFRLEVBQUVMLElBQUksQ0FBQ00sRUFBRSxDQUFDO01BQ3BCLENBQUM7SUFBQTtFQUFDO0FBRU4sQ0FBQyxDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQVgsT0FBQTtBQUFBTSxNQUFBLENBQUFNLGNBQUEsQ0FBQUMsT0FBQTtFQUFBQyxLQUFBO0FBQUE7QUE5QkgsSUFBQUMsaUJBQUEsR0FBQUosc0JBQUEsQ0FBQVgsT0FBQTtBQUVBLElBQUFnQixhQUFBLEdBQUFoQixPQUFBO0FBOEJBTSxNQUFBLENBQUFXLElBQUEsQ0FBQUQsYUFBQSxFQUFBRSxPQUFBLFdBQUFDLEdBQUE7RUFBQSxJQUFBQSxHQUFBLGtCQUFBQSxHQUFBO0VBQUEsSUFBQUEsR0FBQSxJQUFBTixPQUFBLElBQUFBLE9BQUEsQ0FBQU0sR0FBQSxNQUFBSCxhQUFBLENBQUFHLEdBQUE7RUFBQWIsTUFBQSxDQUFBTSxjQUFBLENBQUFDLE9BQUEsRUFBQU0sR0FBQTtJQUFBQyxVQUFBO0lBQUFDLEdBQUEsV0FBQUEsSUFBQTtNQUFBLE9BQUFMLGFBQUEsQ0FBQUcsR0FBQTtJQUFBO0VBQUE7QUFBQTtBQTdCQW5CLE9BQUE7QUFBZ0QsU0FBQU4sWUFBQTtFQUFBLElBQUE0QixRQUFBLEdBQUF0QixPQUFBO0lBQUFJLElBQUEsR0FBQWtCLFFBQUEsQ0FBQWxCLElBQUE7RUFBQVYsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQVUsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBR2hEQSxJQUFJLENBQUNtQixhQUFhLENBQUMsQ0FBQztBQUVwQm5CLElBQUksQ0FBQ29CLEtBQUssQ0FBQ0MsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDQyxrQkFBa0IsQ0FBQyxZQUFNLENBQUMsQ0FBQyxDQUFDIn0=