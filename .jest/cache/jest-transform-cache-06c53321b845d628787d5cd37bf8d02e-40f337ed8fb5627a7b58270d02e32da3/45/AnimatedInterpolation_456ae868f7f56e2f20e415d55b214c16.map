{"version":3,"names":["linear","t","createInterpolation","config","outputRange","createInterpolationFromStringOutputRange","inputRange","__DEV__","checkInfiniteRange","checkValidInputRange","invariant","length","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","result","Infinity","colorToRgba","normalizedColor","normalizeColor","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","forEach","value","number","i","push","interpolations","shouldRound","isRgbOrRgba","replace","val","Math","round","String","startsWith","arr","pattern","message","name","AnimatedInterpolation","parent","_parent","_config","_interpolation","platformConfig","__makeNative","parentValue","__getValue","__addChild","__removeChild","NativeAnimatedHelper","transformDataType","validateInterpolation","__transformDataType","type","AnimatedWithChildren","__createInterpolation"],"sources":["AnimatedInterpolation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n/* eslint no-bitwise: 0 */\n\n'use strict';\n\nimport type {PlatformConfig} from '../AnimatedPlatformConfig';\nimport type AnimatedNode from './AnimatedNode';\n\nimport normalizeColor from '../../StyleSheet/normalizeColor';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport invariant from 'invariant';\n\ntype ExtrapolateType = 'extend' | 'identity' | 'clamp';\n\nexport type InterpolationConfigType<OutputT: number | string> = $ReadOnly<{\n  inputRange: $ReadOnlyArray<number>,\n  outputRange: $ReadOnlyArray<OutputT>,\n  easing?: (input: number) => number,\n  extrapolate?: ExtrapolateType,\n  extrapolateLeft?: ExtrapolateType,\n  extrapolateRight?: ExtrapolateType,\n}>;\n\nconst linear = (t: number) => t;\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createInterpolation<OutputT: number | string>(\n  config: InterpolationConfigType<OutputT>,\n): (input: number) => OutputT {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return (createInterpolationFromStringOutputRange((config: any)): any);\n  }\n\n  const outputRange: $ReadOnlyArray<number> = (config.outputRange: any);\n\n  const inputRange = config.inputRange;\n\n  if (__DEV__) {\n    checkInfiniteRange('outputRange', outputRange);\n    checkInfiniteRange('inputRange', inputRange);\n    checkValidInputRange(inputRange);\n\n    invariant(\n      inputRange.length === outputRange.length,\n      'inputRange (' +\n        inputRange.length +\n        ') and outputRange (' +\n        outputRange.length +\n        ') must have the same length',\n    );\n  }\n\n  const easing = config.easing || linear;\n\n  let extrapolateLeft: ExtrapolateType = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  let extrapolateRight: ExtrapolateType = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(\n      typeof input === 'number',\n      'Cannot interpolation an input which is not a number',\n    );\n\n    const range = findRange(input, inputRange);\n    return (interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n    ): any);\n  };\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: (input: number) => number,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n) {\n  let result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input: string): string {\n  let normalizedColor = normalizeColor(input);\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n\n  normalizedColor = normalizedColor || 0;\n\n  const r = (normalizedColor & 0xff000000) >>> 24;\n  const g = (normalizedColor & 0x00ff0000) >>> 16;\n  const b = (normalizedColor & 0x0000ff00) >>> 8;\n  const a = (normalizedColor & 0x000000ff) / 255;\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\nconst stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createInterpolationFromStringOutputRange(\n  config: InterpolationConfigType<string>,\n): (input: number) => string {\n  let outputRange: Array<string> = (config.outputRange: any);\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n\n  // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n  /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n   * return `null`. Need to guard against this possibility. */\n  const outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);\n  outputRange.forEach(value => {\n    /* $FlowFixMe[incompatible-use] (>=0.18.0): `value.match()` can return\n     * `null`. Need to guard against this possibility. */\n    value.match(stringShapeRegex).forEach((number, i) => {\n      outputRanges[i].push(+number);\n    });\n  });\n\n  const interpolations = outputRange[0]\n    .match(stringShapeRegex)\n    /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n     * return `null`. Need to guard against this possibility. */\n    /* $FlowFixMe[incompatible-call] (>=0.18.0): `outputRange[0].match()` can\n     * return `null`. Need to guard against this possibility. */\n    .map((value, i) => {\n      return createInterpolation({\n        ...config,\n        outputRange: outputRanges[i],\n      });\n    });\n\n  // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n  const shouldRound = isRgbOrRgba(outputRange[0]);\n\n  return input => {\n    let i = 0;\n    // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n    return outputRange[0].replace(stringShapeRegex, () => {\n      let val = +interpolations[i++](input);\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range: string) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr: $ReadOnlyArray<string>) {\n  const pattern = arr[0].replace(stringShapeRegex, '');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      pattern === arr[i].replace(stringShapeRegex, ''),\n      'invalid pattern ' + arr[0] + ' and ' + arr[i],\n    );\n  }\n}\n\nfunction findRange(input: number, inputRange: $ReadOnlyArray<number>) {\n  let i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  const message =\n    'inputRange must be monotonically non-decreasing ' + String(arr);\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], message);\n  }\n}\n\nfunction checkInfiniteRange(name: string, arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(\n    arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n    /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression\n     * below this comment, one or both of the operands may be something that\n     * doesn't cleanly convert to a string, like undefined, null, and object,\n     * etc. If you really mean this implicit string conversion, you can do\n     * something like String(myThing) */\n    name + 'cannot be ]-infinity;+infinity[ ' + arr,\n  );\n}\n\nexport default class AnimatedInterpolation<\n  OutputT: number | string,\n> extends AnimatedWithChildren {\n  // Export for testing.\n  static __createInterpolation: (\n    config: InterpolationConfigType<OutputT>,\n  ) => (input: number) => OutputT = createInterpolation;\n\n  _parent: AnimatedNode;\n  _config: InterpolationConfigType<OutputT>;\n  _interpolation: (input: number) => OutputT;\n\n  constructor(parent: AnimatedNode, config: InterpolationConfigType<OutputT>) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    this._interpolation = createInterpolation(config);\n  }\n\n  __makeNative(platformConfig: ?PlatformConfig) {\n    this._parent.__makeNative(platformConfig);\n    super.__makeNative(platformConfig);\n  }\n\n  __getValue(): number | string {\n    const parentValue: number = this._parent.__getValue();\n    invariant(\n      typeof parentValue === 'number',\n      'Cannot interpolate an input which is not a number.',\n    );\n    return this._interpolation(parentValue);\n  }\n\n  interpolate<NewOutputT: number | string>(\n    config: InterpolationConfigType<NewOutputT>,\n  ): AnimatedInterpolation<NewOutputT> {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach(): void {\n    this._parent.__addChild(this);\n  }\n\n  __detach(): void {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n\n  __transformDataType(range: $ReadOnlyArray<OutputT>): Array<any> {\n    return range.map(NativeAnimatedHelper.transformDataType);\n  }\n\n  __getNativeConfig(): any {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft:\n        this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight:\n        this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation',\n    };\n  }\n}\n"],"mappings":"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"}