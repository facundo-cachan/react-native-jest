{"version":3,"names":["codegenNativeComponent","componentName","options","global","RN$Bridgeless","errorMessage","console","error","componentNameInUse","paperComponentName","paperComponentNameDeprecated","UIManager","hasViewManagerConfig","Error","requireNativeComponent"],"sources":["codegenNativeComponent.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n// TODO: move this file to shims/ReactNative (requires React update and sync)\n\nimport type {HostComponent} from '../../Libraries/Renderer/shims/ReactNativeTypes';\n\nimport requireNativeComponent from '../../Libraries/ReactNative/requireNativeComponent';\nimport UIManager from '../ReactNative/UIManager';\n\n// TODO: import from CodegenSchema once workspaces are enabled\ntype Options = $ReadOnly<{|\n  interfaceOnly?: boolean,\n  paperComponentName?: string,\n  paperComponentNameDeprecated?: string,\n  excludedPlatforms?: $ReadOnlyArray<'iOS' | 'android'>,\n|}>;\n\nexport type NativeComponentType<T> = HostComponent<T>;\n\n// If this function runs then that means the view configs were not\n// generated at build time using `GenerateViewConfigJs.js`. Thus\n// we need to `requireNativeComponent` to get the view configs from view managers.\n// `requireNativeComponent` is not available in Bridgeless mode.\n// e.g. This function runs at runtime if `codegenNativeComponent` was not called\n// from a file suffixed with NativeComponent.js.\nfunction codegenNativeComponent<Props>(\n  componentName: string,\n  options?: Options,\n): NativeComponentType<Props> {\n  if (global.RN$Bridgeless === true) {\n    const errorMessage =\n      \"Native Component '\" +\n      componentName +\n      \"' that calls codegenNativeComponent was not code generated at build time. Please check its definition.\";\n    console.error(errorMessage);\n  }\n\n  let componentNameInUse =\n    options && options.paperComponentName != null\n      ? options.paperComponentName\n      : componentName;\n\n  if (options != null && options.paperComponentNameDeprecated != null) {\n    if (UIManager.hasViewManagerConfig(componentName)) {\n      componentNameInUse = componentName;\n    } else if (\n      options.paperComponentNameDeprecated != null &&\n      UIManager.hasViewManagerConfig(options.paperComponentNameDeprecated)\n    ) {\n      // $FlowFixMe[incompatible-type]\n      componentNameInUse = options.paperComponentNameDeprecated;\n    } else {\n      throw new Error(\n        `Failed to find native component for either ${componentName} or ${\n          options.paperComponentNameDeprecated ?? '(unknown)'\n        }`,\n      );\n    }\n  }\n\n  return (requireNativeComponent<Props>(\n    // $FlowFixMe[incompatible-call]\n    componentNameInUse,\n  ): HostComponent<Props>);\n}\n\nexport default codegenNativeComponent;\n"],"mappings":";;;;;;;AAcA;;AACA;;AAkBA,SAASA,sBAAT,CACEC,aADF,EAEEC,OAFF,EAG8B;EAC5B,IAAIC,MAAM,CAACC,aAAP,KAAyB,IAA7B,EAAmC;IACjC,IAAMC,YAAY,GAChB,uBACAJ,aADA,GAEA,wGAHF;IAIAK,OAAO,CAACC,KAAR,CAAcF,YAAd;EACD;;EAED,IAAIG,kBAAkB,GACpBN,OAAO,IAAIA,OAAO,CAACO,kBAAR,IAA8B,IAAzC,GACIP,OAAO,CAACO,kBADZ,GAEIR,aAHN;;EAKA,IAAIC,OAAO,IAAI,IAAX,IAAmBA,OAAO,CAACQ,4BAAR,IAAwC,IAA/D,EAAqE;IACnE,IAAIC,kBAAA,CAAUC,oBAAV,CAA+BX,aAA/B,CAAJ,EAAmD;MACjDO,kBAAkB,GAAGP,aAArB;IACD,CAFD,MAEO,IACLC,OAAO,CAACQ,4BAAR,IAAwC,IAAxC,IACAC,kBAAA,CAAUC,oBAAV,CAA+BV,OAAO,CAACQ,4BAAvC,CAFK,EAGL;MAEAF,kBAAkB,GAAGN,OAAO,CAACQ,4BAA7B;IACD,CANM,MAMA;MAAA;;MACL,MAAM,IAAIG,KAAJ,CACH,8CAA6CZ,aAAc,OAA5D,yBACEC,OAAO,CAACQ,4BADV,oCAC0C,WACzC,EAHG,CAAN;IAKD;EACF;;EAED,OAAQ,IAAAI,+BAAA,EAENN,kBAFM,CAAR;AAID;;eAEcR,sB"}