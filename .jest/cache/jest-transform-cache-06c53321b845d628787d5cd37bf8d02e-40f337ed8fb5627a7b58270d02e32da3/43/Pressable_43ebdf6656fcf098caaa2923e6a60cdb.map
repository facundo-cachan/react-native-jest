{"version":3,"names":["Pressable","props","forwardedRef","accessible","accessibilityState","ariaLive","android_disableSound","android_ripple","ariaBusy","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","ariaSelected","cancelable","children","delayHoverIn","delayHoverOut","delayLongPress","disabled","focusable","hitSlop","onHoverIn","onHoverOut","onLongPress","onPress","onPressIn","onPressOut","pressRetentionOffset","style","testOnly_pressed","unstable_pressDelay","restProps","viewRef","useRef","useImperativeHandle","current","android_rippleConfig","useAndroidRippleForView","usePressState","pressed","setPressed","_accessibilityState","busy","checked","expanded","selected","accessibilityValue","max","min","now","text","accessibilityLiveRegion","accessibilityLabel","restPropsWithDefaults","viewProps","accessibilityViewIsModal","config","useMemo","pressRectOffset","delayPressIn","event","onPressMove","eventHandlers","usePressability","__DEV__","forcePressed","useState","MemoedPressable","React","memo","forwardRef","displayName"],"sources":["Pressable.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  LayoutEvent,\n  MouseEvent,\n  PressEvent,\n} from '../../Types/CoreEventTypes';\nimport type {\n  AccessibilityActionEvent,\n  AccessibilityActionInfo,\n  AccessibilityRole,\n  AccessibilityState,\n  AccessibilityValue,\n} from '../View/ViewAccessibility';\n\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport usePressability from '../../Pressability/usePressability';\nimport {type RectOrSize} from '../../StyleSheet/Rect';\nimport View from '../View/View';\nimport useAndroidRippleForView, {\n  type RippleConfig,\n} from './useAndroidRippleForView';\nimport * as React from 'react';\nimport {useImperativeHandle, useMemo, useRef, useState} from 'react';\n\ntype ViewStyleProp = $ElementType<React.ElementConfig<typeof View>, 'style'>;\n\nexport type StateCallbackType = $ReadOnly<{|\n  pressed: boolean,\n|}>;\n\ntype Props = $ReadOnly<{|\n  /**\n   * Accessibility.\n   */\n  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,\n  accessibilityElementsHidden?: ?boolean,\n  accessibilityHint?: ?Stringish,\n  accessibilityLanguage?: ?Stringish,\n  accessibilityIgnoresInvertColors?: ?boolean,\n  accessibilityLabel?: ?Stringish,\n  accessibilityLiveRegion?: ?('none' | 'polite' | 'assertive'),\n  accessibilityRole?: ?AccessibilityRole,\n  accessibilityState?: ?AccessibilityState,\n  accessibilityValue?: ?AccessibilityValue,\n  'aria-valuemax'?: AccessibilityValue['max'],\n  'aria-valuemin'?: AccessibilityValue['min'],\n  'aria-valuenow'?: AccessibilityValue['now'],\n  'aria-valuetext'?: AccessibilityValue['text'],\n  accessibilityViewIsModal?: ?boolean,\n  'aria-modal'?: ?boolean,\n  accessible?: ?boolean,\n\n  /**\n   * alias for accessibilityState\n   *\n   * see https://reactnative.dev/docs/accessibility#accessibilitystate\n   */\n  'aria-busy'?: ?boolean,\n  'aria-checked'?: ?boolean | 'mixed',\n  'aria-disabled'?: ?boolean,\n  'aria-expanded'?: ?boolean,\n  'aria-selected'?: ?boolean,\n  /**\n   * A value indicating whether the accessibility elements contained within\n   * this accessibility element are hidden.\n   */\n  'aria-hidden'?: ?boolean,\n  'aria-live'?: ?('polite' | 'assertive' | 'off'),\n  focusable?: ?boolean,\n  importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),\n  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,\n\n  /**\n   * Whether a press gesture can be interrupted by a parent gesture such as a\n   * scroll event. Defaults to true.\n   */\n  cancelable?: ?boolean,\n\n  /**\n   * Either children or a render prop that receives a boolean reflecting whether\n   * the component is currently pressed.\n   */\n  children: React.Node | ((state: StateCallbackType) => React.Node),\n\n  /**\n   * Duration to wait after hover in before calling `onHoverIn`.\n   */\n  delayHoverIn?: ?number,\n\n  /**\n   * Duration to wait after hover out before calling `onHoverOut`.\n   */\n  delayHoverOut?: ?number,\n\n  /**\n   * Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.\n   */\n  delayLongPress?: ?number,\n\n  /**\n   * Whether the press behavior is disabled.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Additional distance outside of this view in which a press is detected.\n   */\n  hitSlop?: ?RectOrSize,\n\n  /**\n   * Additional distance outside of this view in which a touch is considered a\n   * press before `onPressOut` is triggered.\n   */\n  pressRetentionOffset?: ?RectOrSize,\n\n  /**\n   * Called when this view's layout changes.\n   */\n  onLayout?: ?(event: LayoutEvent) => mixed,\n\n  /**\n   * Called when the hover is activated to provide visual feedback.\n   */\n  onHoverIn?: ?(event: MouseEvent) => mixed,\n\n  /**\n   * Called when the hover is deactivated to undo visual feedback.\n   */\n  onHoverOut?: ?(event: MouseEvent) => mixed,\n\n  /**\n   * Called when a long-tap gesture is detected.\n   */\n  onLongPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a single tap gesture is detected.\n   */\n  onPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a touch is engaged before `onPress`.\n   */\n  onPressIn?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a touch is released before `onPress`.\n   */\n  onPressOut?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Either view styles or a function that receives a boolean reflecting whether\n   * the component is currently pressed and returns view styles.\n   */\n  style?: ViewStyleProp | ((state: StateCallbackType) => ViewStyleProp),\n\n  /**\n   * Identifier used to find this view in tests.\n   */\n  testID?: ?string,\n\n  /**\n   * If true, doesn't play system sound on touch.\n   */\n  android_disableSound?: ?boolean,\n\n  /**\n   * Enables the Android ripple effect and configures its color.\n   */\n  android_ripple?: ?RippleConfig,\n\n  /**\n   * Used only for documentation or testing (e.g. snapshot testing).\n   */\n  testOnly_pressed?: ?boolean,\n\n  /**\n   * Duration to wait after press down before calling `onPressIn`.\n   */\n  unstable_pressDelay?: ?number,\n  /**\n   * Web to Native Accessibilty props\n   * https://github.com/facebook/react-native/issues/34424\n   */\n  'aria-label'?: ?string,\n|}>;\n\n/**\n * Component used to build display components that should respond to whether the\n * component is currently pressed or not.\n */\n/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n * LTI update could not be added via codemod */\nfunction Pressable(props: Props, forwardedRef): React.Node {\n  const {\n    accessible,\n    accessibilityState,\n    'aria-live': ariaLive,\n    android_disableSound,\n    android_ripple,\n    'aria-busy': ariaBusy,\n    'aria-checked': ariaChecked,\n    'aria-disabled': ariaDisabled,\n    'aria-expanded': ariaExpanded,\n    'aria-label': ariaLabel,\n    'aria-selected': ariaSelected,\n    cancelable,\n    children,\n    delayHoverIn,\n    delayHoverOut,\n    delayLongPress,\n    disabled,\n    focusable,\n    hitSlop,\n    onHoverIn,\n    onHoverOut,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    pressRetentionOffset,\n    style,\n    testOnly_pressed,\n    unstable_pressDelay,\n    ...restProps\n  } = props;\n\n  const viewRef = useRef<React.ElementRef<typeof View> | null>(null);\n  useImperativeHandle(forwardedRef, () => viewRef.current);\n\n  const android_rippleConfig = useAndroidRippleForView(android_ripple, viewRef);\n\n  const [pressed, setPressed] = usePressState(testOnly_pressed === true);\n\n  let _accessibilityState = {\n    busy: ariaBusy ?? accessibilityState?.busy,\n    checked: ariaChecked ?? accessibilityState?.checked,\n    disabled: ariaDisabled ?? accessibilityState?.disabled,\n    expanded: ariaExpanded ?? accessibilityState?.expanded,\n    selected: ariaSelected ?? accessibilityState?.selected,\n  };\n\n  _accessibilityState =\n    disabled != null ? {..._accessibilityState, disabled} : _accessibilityState;\n\n  const accessibilityValue = {\n    max: props['aria-valuemax'] ?? props.accessibilityValue?.max,\n    min: props['aria-valuemin'] ?? props.accessibilityValue?.min,\n    now: props['aria-valuenow'] ?? props.accessibilityValue?.now,\n    text: props['aria-valuetext'] ?? props.accessibilityValue?.text,\n  };\n\n  const accessibilityLiveRegion =\n    ariaLive === 'off' ? 'none' : ariaLive ?? props.accessibilityLiveRegion;\n\n  const accessibilityLabel = ariaLabel ?? props.accessibilityLabel;\n  const restPropsWithDefaults: React.ElementConfig<typeof View> = {\n    ...restProps,\n    ...android_rippleConfig?.viewProps,\n    accessible: accessible !== false,\n    accessibilityViewIsModal:\n      restProps['aria-modal'] ?? restProps.accessibilityViewIsModal,\n    accessibilityLiveRegion,\n    accessibilityLabel,\n    accessibilityState: _accessibilityState,\n    focusable: focusable !== false,\n    accessibilityValue,\n    hitSlop,\n  };\n\n  const config = useMemo(\n    () => ({\n      cancelable,\n      disabled,\n      hitSlop,\n      pressRectOffset: pressRetentionOffset,\n      android_disableSound,\n      delayHoverIn,\n      delayHoverOut,\n      delayLongPress,\n      delayPressIn: unstable_pressDelay,\n      onHoverIn,\n      onHoverOut,\n      onLongPress,\n      onPress,\n      onPressIn(event: PressEvent): void {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressIn(event);\n        }\n        setPressed(true);\n        if (onPressIn != null) {\n          onPressIn(event);\n        }\n      },\n      onPressMove: android_rippleConfig?.onPressMove,\n      onPressOut(event: PressEvent): void {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressOut(event);\n        }\n        setPressed(false);\n        if (onPressOut != null) {\n          onPressOut(event);\n        }\n      },\n    }),\n    [\n      android_disableSound,\n      android_rippleConfig,\n      cancelable,\n      delayHoverIn,\n      delayHoverOut,\n      delayLongPress,\n      disabled,\n      hitSlop,\n      onHoverIn,\n      onHoverOut,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      pressRetentionOffset,\n      setPressed,\n      unstable_pressDelay,\n    ],\n  );\n  const eventHandlers = usePressability(config);\n\n  return (\n    <View\n      {...restPropsWithDefaults}\n      {...eventHandlers}\n      ref={viewRef}\n      style={typeof style === 'function' ? style({pressed}) : style}\n      collapsable={false}>\n      {typeof children === 'function' ? children({pressed}) : children}\n      {__DEV__ ? <PressabilityDebugView color=\"red\" hitSlop={hitSlop} /> : null}\n    </View>\n  );\n}\n\nfunction usePressState(forcePressed: boolean): [boolean, (boolean) => void] {\n  const [pressed, setPressed] = useState(false);\n  return [pressed || forcePressed, setPressed];\n}\n\nconst MemoedPressable = React.memo(React.forwardRef(Pressable));\nMemoedPressable.displayName = 'Pressable';\n\nexport default (MemoedPressable: React.AbstractComponent<\n  Props,\n  React.ElementRef<typeof View>,\n>);\n"],"mappings":"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"}